ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ADC_initVar
  20              		.bss
  21              		.type	ADC_initVar, %object
  22              		.size	ADC_initVar, 1
  23              	ADC_initVar:
  24 0000 00       		.space	1
  25              		.comm	ADC_offset,6,4
  26              		.comm	ADC_countsPer10Volt,12,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	ADC_channelsConfig, %object
  30              		.size	ADC_channelsConfig, 12
  31              	ADC_channelsConfig:
  32 0000 00040000 		.word	1024
  33 0004 00040000 		.word	1024
  34 0008 00040000 		.word	1024
  35              		.section	.text.ADC_Start,"ax",%progbits
  36              		.align	2
  37              		.global	ADC_Start
  38              		.code	16
  39              		.thumb_func
  40              		.type	ADC_Start, %function
  41              	ADC_Start:
  42              	.LFB2:
  43              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.50
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 2


  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u, 0x00000400u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  44              		.loc 1 64 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 1, uses_anonymous_args = 0
  48 0000 80B5     		push	{r7, lr}
  49              		.cfi_def_cfa_offset 8
  50              		.cfi_offset 7, -8
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 3


  51              		.cfi_offset 14, -4
  52 0002 00AF     		add	r7, sp, #0
  53              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  54              		.loc 1 66 0
  55 0004 064B     		ldr	r3, .L3
  56 0006 1B78     		ldrb	r3, [r3]
  57 0008 002B     		cmp	r3, #0
  58 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  59              		.loc 1 68 0
  60 000c FFF7FEFF 		bl	ADC_Init
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  61              		.loc 1 69 0
  62 0010 034B     		ldr	r3, .L3
  63 0012 0122     		movs	r2, #1
  64 0014 1A70     		strb	r2, [r3]
  65              	.L2:
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  66              		.loc 1 71 0
  67 0016 FFF7FEFF 		bl	ADC_Enable
  72:Generated_Source\PSoC4/ADC.c **** }
  68              		.loc 1 72 0
  69 001a C046     		nop
  70 001c BD46     		mov	sp, r7
  71              		@ sp needed
  72 001e 80BD     		pop	{r7, pc}
  73              	.L4:
  74              		.align	2
  75              	.L3:
  76 0020 00000000 		.word	ADC_initVar
  77              		.cfi_endproc
  78              	.LFE2:
  79              		.size	ADC_Start, .-ADC_Start
  80              		.section	.text.ADC_Init,"ax",%progbits
  81              		.align	2
  82              		.global	ADC_Init
  83              		.code	16
  84              		.thumb_func
  85              		.type	ADC_Init, %function
  86              	ADC_Init:
  87              	.LFB3:
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 4


  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  88              		.loc 1 95 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 16
  91              		@ frame_needed = 1, uses_anonymous_args = 0
  92 0000 80B5     		push	{r7, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96 0002 84B0     		sub	sp, sp, #16
  97              		.cfi_def_cfa_offset 24
  98 0004 00AF     		add	r7, sp, #0
  99              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 5


 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
 100              		.loc 1 172 0
 101 0006 0321     		movs	r1, #3
 102 0008 0F20     		movs	r0, #15
 103 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
 104              		.loc 1 173 0
 105 000e 7A4B     		ldr	r3, .L21
 106 0010 1900     		movs	r1, r3
 107 0012 0F20     		movs	r0, #15
 108 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 6


 109              		.loc 1 177 0
 110 0018 784B     		ldr	r3, .L21+4
 111 001a 0322     		movs	r2, #3
 112 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 113              		.loc 1 180 0
 114 001e 784B     		ldr	r3, .L21+8
 115 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 178 0
 117 0022 002B     		cmp	r3, #0
 118 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 119              		.loc 1 178 0 is_stmt 0 discriminator 1
 120 0026 7749     		ldr	r1, .L21+12
 121 0028 00E0     		b	.L7
 122              	.L6:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 123              		.loc 1 178 0 discriminator 2
 124 002a 7749     		ldr	r1, .L21+16
 125              	.L7:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 126              		.loc 1 178 0 discriminator 4
 127 002c 774B     		ldr	r3, .L21+20
 128 002e 774A     		ldr	r2, .L21+20
 129 0030 1268     		ldr	r2, [r2]
 130 0032 0A43     		orrs	r2, r1
 131 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 132              		.loc 1 182 0 is_stmt 1 discriminator 4
 133 0036 764B     		ldr	r3, .L21+24
 134 0038 764A     		ldr	r2, .L21+28
 135 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 136              		.loc 1 183 0 discriminator 4
 137 003c 764B     		ldr	r3, .L21+32
 138 003e 774A     		ldr	r2, .L21+36
 139 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 140              		.loc 1 184 0 discriminator 4
 141 0042 774B     		ldr	r3, .L21+40
 142 0044 0022     		movs	r2, #0
 143 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 144              		.loc 1 185 0 discriminator 4
 145 0048 764B     		ldr	r3, .L21+44
 146 004a 774A     		ldr	r2, .L21+48
 147 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 148              		.loc 1 186 0 discriminator 4
 149 004e 774B     		ldr	r3, .L21+52
 150 0050 754A     		ldr	r2, .L21+48
 151 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC.c ****     
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 7


 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 152              		.loc 1 190 0 discriminator 4
 153 0054 764B     		ldr	r3, .L21+56
 154 0056 764A     		ldr	r2, .L21+56
 155 0058 1268     		ldr	r2, [r2]
 156 005a 8021     		movs	r1, #128
 157 005c 4902     		lsls	r1, r1, #9
 158 005e 0A43     		orrs	r2, r1
 159 0060 1A60     		str	r2, [r3]
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 160              		.loc 1 193 0 discriminator 4
 161 0062 744B     		ldr	r3, .L21+60
 162 0064 734A     		ldr	r2, .L21+60
 163 0066 1268     		ldr	r2, [r2]
 164 0068 8021     		movs	r1, #128
 165 006a 4902     		lsls	r1, r1, #9
 166 006c 0A43     		orrs	r2, r1
 167 006e 1A60     		str	r2, [r3]
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 168              		.loc 1 197 0 discriminator 4
 169 0070 714B     		ldr	r3, .L21+64
 170 0072 0022     		movs	r2, #0
 171 0074 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 172              		.loc 1 198 0 discriminator 4
 173 0076 714B     		ldr	r3, .L21+68
 174 0078 0022     		movs	r2, #0
 175 007a 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 176              		.loc 1 199 0 discriminator 4
 177 007c 704B     		ldr	r3, .L21+72
 178 007e 1122     		movs	r2, #17
 179 0080 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 180              		.loc 1 206 0 discriminator 4
 181 0082 704B     		ldr	r3, .L21+76
 182 0084 1B68     		ldr	r3, [r3]
 183 0086 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 184              		.loc 1 207 0 discriminator 4
 185 0088 7B68     		ldr	r3, [r7, #4]
 186 008a 6F4A     		ldr	r2, .L21+80
 187 008c 1340     		ands	r3, r2
 188 008e 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 8


 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 189              		.loc 1 220 0 discriminator 4
 190 0090 7B68     		ldr	r3, [r7, #4]
 191 0092 8022     		movs	r2, #128
 192 0094 9205     		lsls	r2, r2, #22
 193 0096 1343     		orrs	r3, r2
 194 0098 7B60     		str	r3, [r7, #4]
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 195              		.loc 1 221 0 discriminator 4
 196 009a 7B68     		ldr	r3, [r7, #4]
 197 009c 0122     		movs	r2, #1
 198 009e 9343     		bics	r3, r2
 199 00a0 7B60     		str	r3, [r7, #4]
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 200              		.loc 1 226 0 discriminator 4
 201 00a2 684B     		ldr	r3, .L21+76
 202 00a4 7A68     		ldr	r2, [r7, #4]
 203 00a6 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 204              		.loc 1 232 0 discriminator 4
 205 00a8 0023     		movs	r3, #0
 206 00aa FB60     		str	r3, [r7, #12]
 207 00ac 9BE0     		b	.L8
 208              	.L20:
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 209              		.loc 1 234 0
 210 00ae 674B     		ldr	r3, .L21+84
 211 00b0 FA68     		ldr	r2, [r7, #12]
 212 00b2 9200     		lsls	r2, r2, #2
 213 00b4 D258     		ldr	r2, [r2, r3]
 214 00b6 DC23     		movs	r3, #220
 215 00b8 9B01     		lsls	r3, r3, #6
 216 00ba 1340     		ands	r3, r2
 217 00bc 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 9


 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 218              		.loc 1 236 0
 219 00be 644A     		ldr	r2, .L21+88
 220 00c0 FB68     		ldr	r3, [r7, #12]
 221 00c2 D318     		adds	r3, r2, r3
 222 00c4 1B78     		ldrb	r3, [r3]
 223 00c6 1A00     		movs	r2, r3
 224 00c8 7B68     		ldr	r3, [r7, #4]
 225 00ca 1343     		orrs	r3, r2
 226 00cc 7B60     		str	r3, [r7, #4]
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 227              		.loc 1 250 0
 228 00ce FB68     		ldr	r3, [r7, #12]
 229 00d0 012B     		cmp	r3, #1
 230 00d2 2BD8     		bhi	.L9
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 231              		.loc 1 253 0
 232 00d4 FB68     		ldr	r3, [r7, #12]
 233 00d6 9B00     		lsls	r3, r3, #2
 234 00d8 5E4A     		ldr	r2, .L21+92
 235 00da 9446     		mov	ip, r2
 236 00dc 6344     		add	r3, r3, ip
 237 00de 7A68     		ldr	r2, [r7, #4]
 238 00e0 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 239              		.loc 1 255 0
 240 00e2 5A4B     		ldr	r3, .L21+84
 241 00e4 FA68     		ldr	r2, [r7, #12]
 242 00e6 9200     		lsls	r2, r2, #2
 243 00e8 D358     		ldr	r3, [r2, r3]
 244 00ea 0122     		movs	r2, #1
 245 00ec 1340     		ands	r3, r2
 246 00ee 0AD0     		beq	.L10
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 247              		.loc 1 257 0
 248 00f0 514B     		ldr	r3, .L21+64
 249 00f2 514A     		ldr	r2, .L21+64
 250 00f4 1168     		ldr	r1, [r2]
 251 00f6 0120     		movs	r0, #1
 252 00f8 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 10


 253 00fa 9040     		lsls	r0, r0, r2
 254 00fc 0200     		movs	r2, r0
 255 00fe 1204     		lsls	r2, r2, #16
 256 0100 120C     		lsrs	r2, r2, #16
 257 0102 0A43     		orrs	r2, r1
 258 0104 1A60     		str	r2, [r3]
 259              	.L10:
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 260              		.loc 1 260 0
 261 0106 514B     		ldr	r3, .L21+84
 262 0108 FA68     		ldr	r2, [r7, #12]
 263 010a 9200     		lsls	r2, r2, #2
 264 010c D358     		ldr	r3, [r2, r3]
 265 010e 0222     		movs	r2, #2
 266 0110 1340     		ands	r3, r2
 267 0112 2BD0     		beq	.L12
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 268              		.loc 1 262 0
 269 0114 494B     		ldr	r3, .L21+68
 270 0116 494A     		ldr	r2, .L21+68
 271 0118 1168     		ldr	r1, [r2]
 272 011a 0120     		movs	r0, #1
 273 011c FA68     		ldr	r2, [r7, #12]
 274 011e 9040     		lsls	r0, r0, r2
 275 0120 0200     		movs	r2, r0
 276 0122 1204     		lsls	r2, r2, #16
 277 0124 120C     		lsrs	r2, r2, #16
 278 0126 0A43     		orrs	r2, r1
 279 0128 1A60     		str	r2, [r3]
 280 012a 1FE0     		b	.L12
 281              	.L9:
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 282              		.loc 1 268 0
 283 012c 4A4B     		ldr	r3, .L21+96
 284 012e 7A68     		ldr	r2, [r7, #4]
 285 0130 8021     		movs	r1, #128
 286 0132 C905     		lsls	r1, r1, #23
 287 0134 0A43     		orrs	r2, r1
 288 0136 1A60     		str	r2, [r3]
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 289              		.loc 1 270 0
 290 0138 444B     		ldr	r3, .L21+84
 291 013a FA68     		ldr	r2, [r7, #12]
 292 013c 9200     		lsls	r2, r2, #2
 293 013e D358     		ldr	r3, [r2, r3]
 294 0140 0122     		movs	r2, #1
 295 0142 1340     		ands	r3, r2
 296 0144 05D0     		beq	.L13
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 11


 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 297              		.loc 1 272 0
 298 0146 3E4B     		ldr	r3, .L21+72
 299 0148 3D4A     		ldr	r2, .L21+72
 300 014a 1268     		ldr	r2, [r2]
 301 014c 2021     		movs	r1, #32
 302 014e 0A43     		orrs	r2, r1
 303 0150 1A60     		str	r2, [r3]
 304              	.L13:
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 305              		.loc 1 275 0
 306 0152 3E4B     		ldr	r3, .L21+84
 307 0154 FA68     		ldr	r2, [r7, #12]
 308 0156 9200     		lsls	r2, r2, #2
 309 0158 D358     		ldr	r3, [r2, r3]
 310 015a 0222     		movs	r2, #2
 311 015c 1340     		ands	r3, r2
 312 015e 05D0     		beq	.L12
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 313              		.loc 1 277 0
 314 0160 374B     		ldr	r3, .L21+72
 315 0162 374A     		ldr	r2, .L21+72
 316 0164 1268     		ldr	r2, [r2]
 317 0166 4021     		movs	r1, #64
 318 0168 0A43     		orrs	r2, r1
 319 016a 1A60     		str	r2, [r3]
 320              	.L12:
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 321              		.loc 1 282 0
 322 016c 374B     		ldr	r3, .L21+84
 323 016e FA68     		ldr	r2, [r7, #12]
 324 0170 9200     		lsls	r2, r2, #2
 325 0172 D258     		ldr	r2, [r2, r3]
 326 0174 8023     		movs	r3, #128
 327 0176 9B00     		lsls	r3, r3, #2
 328 0178 1340     		ands	r3, r2
 329 017a 03D0     		beq	.L14
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 330              		.loc 1 284 0
 331 017c 8023     		movs	r3, #128
 332 017e 5B00     		lsls	r3, r3, #1
 333 0180 BB60     		str	r3, [r7, #8]
 334 0182 02E0     		b	.L15
 335              	.L14:
 285:Generated_Source\PSoC4/ADC.c ****         }
 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 12


 336              		.loc 1 288 0
 337 0184 8023     		movs	r3, #128
 338 0186 5B01     		lsls	r3, r3, #5
 339 0188 BB60     		str	r3, [r7, #8]
 340              	.L15:
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 341              		.loc 1 291 0
 342 018a 304B     		ldr	r3, .L21+84
 343 018c FA68     		ldr	r2, [r7, #12]
 344 018e 9200     		lsls	r2, r2, #2
 345 0190 D258     		ldr	r2, [r2, r3]
 346 0192 8023     		movs	r3, #128
 347 0194 5B00     		lsls	r3, r3, #1
 348 0196 1340     		ands	r3, r2
 349 0198 05D1     		bne	.L16
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 350              		.loc 1 298 0
 351 019a 304B     		ldr	r3, .L21+100
 352 019c FA68     		ldr	r2, [r7, #12]
 353 019e 5200     		lsls	r2, r2, #1
 354 01a0 0021     		movs	r1, #0
 355 01a2 D152     		strh	r1, [r2, r3]
 356 01a4 09E0     		b	.L17
 357              	.L16:
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 358              		.loc 1 305 0
 359 01a6 BB68     		ldr	r3, [r7, #8]
 360 01a8 002B     		cmp	r3, #0
 361 01aa 00DA     		bge	.L18
 362 01ac 0133     		adds	r3, r3, #1
 363              	.L18:
 364 01ae 5B10     		asrs	r3, r3, #1
 365 01b0 19B2     		sxth	r1, r3
 366 01b2 2A4B     		ldr	r3, .L21+100
 367 01b4 FA68     		ldr	r2, [r7, #12]
 368 01b6 5200     		lsls	r2, r2, #1
 369 01b8 D152     		strh	r1, [r2, r3]
 370              	.L17:
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 13


 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 371              		.loc 1 311 0 discriminator 2
 372 01ba BB68     		ldr	r3, [r7, #8]
 373 01bc 284A     		ldr	r2, .L21+104
 374 01be 5343     		muls	r3, r2
 375 01c0 8022     		movs	r2, #128
 376 01c2 D200     		lsls	r2, r2, #3
 377 01c4 9446     		mov	ip, r2
 378 01c6 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 379              		.loc 1 312 0 discriminator 2
 380 01c8 002B     		cmp	r3, #0
 381 01ca 02DA     		bge	.L19
 382 01cc 254A     		ldr	r2, .L21+108
 383 01ce 9446     		mov	ip, r2
 384 01d0 6344     		add	r3, r3, ip
 385              	.L19:
 386 01d2 DB12     		asrs	r3, r3, #11
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 387              		.loc 1 311 0 discriminator 2
 388 01d4 1BB2     		sxth	r3, r3
 389 01d6 1900     		movs	r1, r3
 390 01d8 234B     		ldr	r3, .L21+112
 391 01da FA68     		ldr	r2, [r7, #12]
 392 01dc 9200     		lsls	r2, r2, #2
 393 01de D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC.c ****     {
 394              		.loc 1 232 0 discriminator 2
 395 01e0 FB68     		ldr	r3, [r7, #12]
 396 01e2 0133     		adds	r3, r3, #1
 397 01e4 FB60     		str	r3, [r7, #12]
 398              	.L8:
 232:Generated_Source\PSoC4/ADC.c ****     {
 399              		.loc 1 232 0 is_stmt 0 discriminator 1
 400 01e6 FB68     		ldr	r3, [r7, #12]
 401 01e8 022B     		cmp	r3, #2
 402 01ea 00D8     		bhi	.LCB326
 403 01ec 5FE7     		b	.L20	@long jump
 404              	.LCB326:
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
 405              		.loc 1 314 0 is_stmt 1
 406 01ee C046     		nop
 407 01f0 BD46     		mov	sp, r7
 408 01f2 04B0     		add	sp, sp, #16
 409              		@ sp needed
 410 01f4 80BD     		pop	{r7, pc}
 411              	.L22:
 412 01f6 C046     		.align	2
 413              	.L21:
 414 01f8 00000000 		.word	ADC_ISR
 415 01fc 20003A40 		.word	1077542944
 416 0200 80033A40 		.word	1077543808
 417 0204 C0201011 		.word	286269632
 418 0208 C0200011 		.word	285221056
 419 020c 00003A40 		.word	1077542912
 420 0210 04003A40 		.word	1077542916
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 14


 421 0214 C4000A80 		.word	-2146828092
 422 0218 18003A40 		.word	1077542936
 423 021c 0000FF07 		.word	134152192
 424 0220 1C003A40 		.word	1077542940
 425 0224 10003A40 		.word	1077542928
 426 0228 02000200 		.word	131074
 427 022c 14003A40 		.word	1077542932
 428 0230 00033A40 		.word	1077543680
 429 0234 40033A40 		.word	1077543744
 430 0238 28023A40 		.word	1077543464
 431 023c 38023A40 		.word	1077543480
 432 0240 18023A40 		.word	1077543448
 433 0244 30003A40 		.word	1077542960
 434 0248 FFFFFFDF 		.word	-536870913
 435 024c 00000000 		.word	ADC_channelsConfig
 436 0250 0C000000 		.word	ADC_InputsPlacement.4913
 437 0254 80003A40 		.word	1077543040
 438 0258 80023A40 		.word	1077543552
 439 025c 00000000 		.word	ADC_offset
 440 0260 10270000 		.word	10000
 441 0264 FF070000 		.word	2047
 442 0268 00000000 		.word	ADC_countsPer10Volt
 443              		.cfi_endproc
 444              	.LFE3:
 445              		.size	ADC_Init, .-ADC_Init
 446              		.section	.text.ADC_Enable,"ax",%progbits
 447              		.align	2
 448              		.global	ADC_Enable
 449              		.code	16
 450              		.thumb_func
 451              		.type	ADC_Enable, %function
 452              	ADC_Enable:
 453              	.LFB4:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 454              		.loc 1 331 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 1, uses_anonymous_args = 0
 458 0000 80B5     		push	{r7, lr}
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 7, -8
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 15


 461              		.cfi_offset 14, -4
 462 0002 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 464              		.loc 1 332 0
 465 0004 0A4B     		ldr	r3, .L27
 466 0006 1B68     		ldr	r3, [r3]
 467 0008 002B     		cmp	r3, #0
 468 000a 0EDB     		blt	.L26
 333:Generated_Source\PSoC4/ADC.c ****     {
 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 469              		.loc 1 336 0
 470 000c C046     		nop
 471              	.L25:
 472              		.loc 1 336 0 is_stmt 0 discriminator 1
 473 000e 094B     		ldr	r3, .L27+4
 474 0010 1B68     		ldr	r3, [r3]
 475 0012 002B     		cmp	r3, #0
 476 0014 FBDB     		blt	.L25
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 477              		.loc 1 342 0 is_stmt 1
 478 0016 064B     		ldr	r3, .L27
 479 0018 054A     		ldr	r2, .L27
 480 001a 1268     		ldr	r2, [r2]
 481 001c 8021     		movs	r1, #128
 482 001e 0906     		lsls	r1, r1, #24
 483 0020 0A43     		orrs	r2, r1
 484 0022 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 485              		.loc 1 345 0
 486 0024 0A20     		movs	r0, #10
 487 0026 FFF7FEFF 		bl	CyDelayUs
 488              	.L26:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 489              		.loc 1 347 0
 490 002a C046     		nop
 491 002c BD46     		mov	sp, r7
 492              		@ sp needed
 493 002e 80BD     		pop	{r7, pc}
 494              	.L28:
 495              		.align	2
 496              	.L27:
 497 0030 00003A40 		.word	1077542912
 498 0034 08023A40 		.word	1077543432
 499              		.cfi_endproc
 500              	.LFE4:
 501              		.size	ADC_Enable, .-ADC_Enable
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 16


 502              		.section	.text.ADC_Stop,"ax",%progbits
 503              		.align	2
 504              		.global	ADC_Stop
 505              		.code	16
 506              		.thumb_func
 507              		.type	ADC_Stop, %function
 508              	ADC_Stop:
 509              	.LFB5:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 510              		.loc 1 366 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514 0000 80B5     		push	{r7, lr}
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 7, -8
 517              		.cfi_offset 14, -4
 518 0002 00AF     		add	r7, sp, #0
 519              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 520              		.loc 1 367 0
 521 0004 044B     		ldr	r3, .L30
 522 0006 044A     		ldr	r2, .L30
 523 0008 1268     		ldr	r2, [r2]
 524 000a 5200     		lsls	r2, r2, #1
 525 000c 5208     		lsrs	r2, r2, #1
 526 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC.c **** }
 527              		.loc 1 368 0
 528 0010 C046     		nop
 529 0012 BD46     		mov	sp, r7
 530              		@ sp needed
 531 0014 80BD     		pop	{r7, pc}
 532              	.L31:
 533 0016 C046     		.align	2
 534              	.L30:
 535 0018 00003A40 		.word	1077542912
 536              		.cfi_endproc
 537              	.LFE5:
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 17


 538              		.size	ADC_Stop, .-ADC_Stop
 539              		.section	.text.ADC_StartConvert,"ax",%progbits
 540              		.align	2
 541              		.global	ADC_StartConvert
 542              		.code	16
 543              		.thumb_func
 544              		.type	ADC_StartConvert, %function
 545              	ADC_StartConvert:
 546              	.LFB6:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 547              		.loc 1 392 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 1, uses_anonymous_args = 0
 551 0000 80B5     		push	{r7, lr}
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 557              		.loc 1 396 0
 558 0004 024B     		ldr	r3, .L33
 559 0006 0122     		movs	r2, #1
 560 0008 1A60     		str	r2, [r3]
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 561              		.loc 1 399 0
 562 000a C046     		nop
 563 000c BD46     		mov	sp, r7
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 18


 564              		@ sp needed
 565 000e 80BD     		pop	{r7, pc}
 566              	.L34:
 567              		.align	2
 568              	.L33:
 569 0010 24003A40 		.word	1077542948
 570              		.cfi_endproc
 571              	.LFE6:
 572              		.size	ADC_StartConvert, .-ADC_StartConvert
 573              		.section	.text.ADC_StopConvert,"ax",%progbits
 574              		.align	2
 575              		.global	ADC_StopConvert
 576              		.code	16
 577              		.thumb_func
 578              		.type	ADC_StopConvert, %function
 579              	ADC_StopConvert:
 580              	.LFB7:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 581              		.loc 1 417 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585 0000 80B5     		push	{r7, lr}
 586              		.cfi_def_cfa_offset 8
 587              		.cfi_offset 7, -8
 588              		.cfi_offset 14, -4
 589 0002 00AF     		add	r7, sp, #0
 590              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 591              		.loc 1 421 0
 592 0004 C046     		nop
 593 0006 BD46     		mov	sp, r7
 594              		@ sp needed
 595 0008 80BD     		pop	{r7, pc}
 596              		.cfi_endproc
 597              	.LFE7:
 598              		.size	ADC_StopConvert, .-ADC_StopConvert
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 19


 599              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 600              		.align	2
 601              		.global	ADC_IsEndConversion
 602              		.code	16
 603              		.thumb_func
 604              		.type	ADC_IsEndConversion, %function
 605              	ADC_IsEndConversion:
 606              	.LFB8:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 607              		.loc 1 451 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 16
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611 0000 80B5     		push	{r7, lr}
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 84B0     		sub	sp, sp, #16
 616              		.cfi_def_cfa_offset 24
 617 0004 00AF     		add	r7, sp, #0
 618              		.cfi_def_cfa_register 7
 619 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 620              		.loc 1 452 0
 621 0008 0023     		movs	r3, #0
 622 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 20


 623              		.loc 1 454 0
 624 000c 7B68     		ldr	r3, [r7, #4]
 625 000e 0322     		movs	r2, #3
 626 0010 1340     		ands	r3, r2
 627 0012 11D0     		beq	.L37
 628              	.L39:
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 629              		.loc 1 458 0 discriminator 2
 630 0014 184B     		ldr	r3, .L44
 631 0016 1B68     		ldr	r3, [r3]
 632 0018 0122     		movs	r2, #1
 633 001a 1340     		ands	r3, r2
 634 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 635              		.loc 1 459 0 discriminator 2
 636 001e FB68     		ldr	r3, [r7, #12]
 637 0020 002B     		cmp	r3, #0
 638 0022 03D1     		bne	.L38
 639              		.loc 1 459 0 is_stmt 0 discriminator 1
 640 0024 7B68     		ldr	r3, [r7, #4]
 641 0026 0222     		movs	r2, #2
 642 0028 1340     		ands	r3, r2
 643 002a F3D1     		bne	.L39
 644              	.L38:
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 645              		.loc 1 461 0 is_stmt 1
 646 002c FB68     		ldr	r3, [r7, #12]
 647 002e 002B     		cmp	r3, #0
 648 0030 02D0     		beq	.L37
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 649              		.loc 1 464 0
 650 0032 114B     		ldr	r3, .L44
 651 0034 0122     		movs	r2, #1
 652 0036 1A60     		str	r2, [r3]
 653              	.L37:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 654              		.loc 1 469 0
 655 0038 7B68     		ldr	r3, [r7, #4]
 656 003a 0C22     		movs	r2, #12
 657 003c 1340     		ands	r3, r2
 658 003e 15D0     		beq	.L40
 659              	.L42:
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 660              		.loc 1 473 0
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 21


 661 0040 0D4B     		ldr	r3, .L44
 662 0042 1B68     		ldr	r3, [r3]
 663 0044 1022     		movs	r2, #16
 664 0046 1340     		ands	r3, r2
 665 0048 FA68     		ldr	r2, [r7, #12]
 666 004a 1343     		orrs	r3, r2
 667 004c FB60     		str	r3, [r7, #12]
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 668              		.loc 1 474 0
 669 004e FB68     		ldr	r3, [r7, #12]
 670 0050 1022     		movs	r2, #16
 671 0052 1340     		ands	r3, r2
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 672              		.loc 1 475 0
 673 0054 03D1     		bne	.L41
 674              		.loc 1 475 0 is_stmt 0 discriminator 1
 675 0056 7B68     		ldr	r3, [r7, #4]
 676 0058 0822     		movs	r2, #8
 677 005a 1340     		ands	r3, r2
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 678              		.loc 1 474 0 is_stmt 1 discriminator 1
 679 005c F0D1     		bne	.L42
 680              	.L41:
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 681              		.loc 1 477 0
 682 005e FB68     		ldr	r3, [r7, #12]
 683 0060 1022     		movs	r2, #16
 684 0062 1340     		ands	r3, r2
 685 0064 02D0     		beq	.L40
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 686              		.loc 1 480 0
 687 0066 044B     		ldr	r3, .L44
 688 0068 1022     		movs	r2, #16
 689 006a 1A60     		str	r2, [r3]
 690              	.L40:
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 691              		.loc 1 485 0
 692 006c FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC.c **** }
 693              		.loc 1 486 0
 694 006e 1800     		movs	r0, r3
 695 0070 BD46     		mov	sp, r7
 696 0072 04B0     		add	sp, sp, #16
 697              		@ sp needed
 698 0074 80BD     		pop	{r7, pc}
 699              	.L45:
 700 0076 C046     		.align	2
 701              	.L44:
 702 0078 10023A40 		.word	1077543440
 703              		.cfi_endproc
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 22


 704              	.LFE8:
 705              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 706              		.section	.text.ADC_GetResult16,"ax",%progbits
 707              		.align	2
 708              		.global	ADC_GetResult16
 709              		.code	16
 710              		.thumb_func
 711              		.type	ADC_GetResult16, %function
 712              	ADC_GetResult16:
 713              	.LFB9:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 714              		.loc 1 505 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 16
 717              		@ frame_needed = 1, uses_anonymous_args = 0
 718 0000 80B5     		push	{r7, lr}
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 7, -8
 721              		.cfi_offset 14, -4
 722 0002 84B0     		sub	sp, sp, #16
 723              		.cfi_def_cfa_offset 24
 724 0004 00AF     		add	r7, sp, #0
 725              		.cfi_def_cfa_register 7
 726 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 727              		.loc 1 509 0
 728 0008 7B68     		ldr	r3, [r7, #4]
 729 000a 022B     		cmp	r3, #2
 730 000c 02D9     		bls	.L47
 731              		.loc 1 509 0 is_stmt 0 discriminator 1
 732 000e 0020     		movs	r0, #0
 733 0010 FFF7FEFF 		bl	CyHalt
 734              	.L47:
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 735              		.loc 1 511 0 is_stmt 1
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 23


 736 0014 7B68     		ldr	r3, [r7, #4]
 737 0016 012B     		cmp	r3, #1
 738 0018 09D8     		bhi	.L48
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 739              		.loc 1 513 0
 740 001a 7B68     		ldr	r3, [r7, #4]
 741 001c 9B00     		lsls	r3, r3, #2
 742 001e 094A     		ldr	r2, .L51
 743 0020 9446     		mov	ip, r2
 744 0022 6344     		add	r3, r3, ip
 745 0024 1B68     		ldr	r3, [r3]
 746 0026 1B04     		lsls	r3, r3, #16
 747 0028 1B0C     		lsrs	r3, r3, #16
 748 002a FB60     		str	r3, [r7, #12]
 749 002c 04E0     		b	.L49
 750              	.L48:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 751              		.loc 1 519 0
 752 002e 064B     		ldr	r3, .L51+4
 753 0030 1B68     		ldr	r3, [r3]
 754 0032 1B04     		lsls	r3, r3, #16
 755 0034 1B0C     		lsrs	r3, r3, #16
 756 0036 FB60     		str	r3, [r7, #12]
 757              	.L49:
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 758              		.loc 1 525 0
 759 0038 FB68     		ldr	r3, [r7, #12]
 760 003a 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC.c **** }
 761              		.loc 1 526 0
 762 003c 1800     		movs	r0, r3
 763 003e BD46     		mov	sp, r7
 764 0040 04B0     		add	sp, sp, #16
 765              		@ sp needed
 766 0042 80BD     		pop	{r7, pc}
 767              	.L52:
 768              		.align	2
 769              	.L51:
 770 0044 80013A40 		.word	1077543296
 771 0048 90023A40 		.word	1077543568
 772              		.cfi_endproc
 773              	.LFE9:
 774              		.size	ADC_GetResult16, .-ADC_GetResult16
 775              		.section	.text.ADC_SetChanMask,"ax",%progbits
 776              		.align	2
 777              		.global	ADC_SetChanMask
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 24


 778              		.code	16
 779              		.thumb_func
 780              		.type	ADC_SetChanMask, %function
 781              	ADC_SetChanMask:
 782              	.LFB10:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 783              		.loc 1 550 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 8
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787 0000 80B5     		push	{r7, lr}
 788              		.cfi_def_cfa_offset 8
 789              		.cfi_offset 7, -8
 790              		.cfi_offset 14, -4
 791 0002 82B0     		sub	sp, sp, #8
 792              		.cfi_def_cfa_offset 16
 793 0004 00AF     		add	r7, sp, #0
 794              		.cfi_def_cfa_register 7
 795 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 796              		.loc 1 551 0
 797 0008 044B     		ldr	r3, .L54
 798 000a 7A68     		ldr	r2, [r7, #4]
 799 000c 0321     		movs	r1, #3
 800 000e 0A40     		ands	r2, r1
 801 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC.c **** }
 802              		.loc 1 552 0
 803 0012 C046     		nop
 804 0014 BD46     		mov	sp, r7
 805 0016 02B0     		add	sp, sp, #8
 806              		@ sp needed
 807 0018 80BD     		pop	{r7, pc}
 808              	.L55:
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 25


 809 001a C046     		.align	2
 810              	.L54:
 811 001c 20003A40 		.word	1077542944
 812              		.cfi_endproc
 813              	.LFE10:
 814              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 815              		.section	.text.ADC_EnableInjection,"ax",%progbits
 816              		.align	2
 817              		.global	ADC_EnableInjection
 818              		.code	16
 819              		.thumb_func
 820              		.type	ADC_EnableInjection, %function
 821              	ADC_EnableInjection:
 822              	.LFB11:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 823              		.loc 1 572 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 1, uses_anonymous_args = 0
 827 0000 80B5     		push	{r7, lr}
 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 7, -8
 830              		.cfi_offset 14, -4
 831 0002 00AF     		add	r7, sp, #0
 832              		.cfi_def_cfa_register 7
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 833              		.loc 1 573 0
 834 0004 044B     		ldr	r3, .L57
 835 0006 044A     		ldr	r2, .L57
 836 0008 1268     		ldr	r2, [r2]
 837 000a 8021     		movs	r1, #128
 838 000c 0906     		lsls	r1, r1, #24
 839 000e 0A43     		orrs	r2, r1
 840 0010 1A60     		str	r2, [r3]
 574:Generated_Source\PSoC4/ADC.c ****     }
 841              		.loc 1 574 0
 842 0012 C046     		nop
 843 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 26


 844              		@ sp needed
 845 0016 80BD     		pop	{r7, pc}
 846              	.L58:
 847              		.align	2
 848              	.L57:
 849 0018 80023A40 		.word	1077543552
 850              		.cfi_endproc
 851              	.LFE11:
 852              		.size	ADC_EnableInjection, .-ADC_EnableInjection
 853              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 854              		.align	2
 855              		.global	ADC_SetLowLimit
 856              		.code	16
 857              		.thumb_func
 858              		.type	ADC_SetLowLimit, %function
 859              	ADC_SetLowLimit:
 860              	.LFB12:
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 861              		.loc 1 594 0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 8
 864              		@ frame_needed = 1, uses_anonymous_args = 0
 865 0000 80B5     		push	{r7, lr}
 866              		.cfi_def_cfa_offset 8
 867              		.cfi_offset 7, -8
 868              		.cfi_offset 14, -4
 869 0002 82B0     		sub	sp, sp, #8
 870              		.cfi_def_cfa_offset 16
 871 0004 00AF     		add	r7, sp, #0
 872              		.cfi_def_cfa_register 7
 873 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 874              		.loc 1 595 0
 875 0008 084B     		ldr	r3, .L60
 876 000a 084A     		ldr	r2, .L60
 877 000c 1268     		ldr	r2, [r2]
 878 000e 120C     		lsrs	r2, r2, #16
 879 0010 1204     		lsls	r2, r2, #16
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 27


 880 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 881              		.loc 1 596 0
 882 0014 054B     		ldr	r3, .L60
 883 0016 054A     		ldr	r2, .L60
 884 0018 1168     		ldr	r1, [r2]
 885 001a 7A68     		ldr	r2, [r7, #4]
 886 001c 1204     		lsls	r2, r2, #16
 887 001e 120C     		lsrs	r2, r2, #16
 888 0020 0A43     		orrs	r2, r1
 889 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC.c **** }
 890              		.loc 1 597 0
 891 0024 C046     		nop
 892 0026 BD46     		mov	sp, r7
 893 0028 02B0     		add	sp, sp, #8
 894              		@ sp needed
 895 002a 80BD     		pop	{r7, pc}
 896              	.L61:
 897              		.align	2
 898              	.L60:
 899 002c 18003A40 		.word	1077542936
 900              		.cfi_endproc
 901              	.LFE12:
 902              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 903              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 904              		.align	2
 905              		.global	ADC_SetHighLimit
 906              		.code	16
 907              		.thumb_func
 908              		.type	ADC_SetHighLimit, %function
 909              	ADC_SetHighLimit:
 910              	.LFB13:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 911              		.loc 1 615 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 8
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0000 80B5     		push	{r7, lr}
 916              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 28


 917              		.cfi_offset 7, -8
 918              		.cfi_offset 14, -4
 919 0002 82B0     		sub	sp, sp, #8
 920              		.cfi_def_cfa_offset 16
 921 0004 00AF     		add	r7, sp, #0
 922              		.cfi_def_cfa_register 7
 923 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 924              		.loc 1 616 0
 925 0008 084B     		ldr	r3, .L63
 926 000a 084A     		ldr	r2, .L63
 927 000c 1268     		ldr	r2, [r2]
 928 000e 1204     		lsls	r2, r2, #16
 929 0010 120C     		lsrs	r2, r2, #16
 930 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 931              		.loc 1 617 0
 932 0014 054B     		ldr	r3, .L63
 933 0016 054A     		ldr	r2, .L63
 934 0018 1168     		ldr	r1, [r2]
 935 001a 7A68     		ldr	r2, [r7, #4]
 936 001c 1204     		lsls	r2, r2, #16
 937 001e 0A43     		orrs	r2, r1
 938 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC.c **** }
 939              		.loc 1 618 0
 940 0022 C046     		nop
 941 0024 BD46     		mov	sp, r7
 942 0026 02B0     		add	sp, sp, #8
 943              		@ sp needed
 944 0028 80BD     		pop	{r7, pc}
 945              	.L64:
 946 002a C046     		.align	2
 947              	.L63:
 948 002c 18003A40 		.word	1077542936
 949              		.cfi_endproc
 950              	.LFE13:
 951              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 952              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 953              		.align	2
 954              		.global	ADC_SetLimitMask
 955              		.code	16
 956              		.thumb_func
 957              		.type	ADC_SetLimitMask, %function
 958              	ADC_SetLimitMask:
 959              	.LFB14:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 29


 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 960              		.loc 1 639 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 8
 963              		@ frame_needed = 1, uses_anonymous_args = 0
 964 0000 80B5     		push	{r7, lr}
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 7, -8
 967              		.cfi_offset 14, -4
 968 0002 82B0     		sub	sp, sp, #8
 969              		.cfi_def_cfa_offset 16
 970 0004 00AF     		add	r7, sp, #0
 971              		.cfi_def_cfa_register 7
 972 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 973              		.loc 1 640 0
 974 0008 044B     		ldr	r3, .L66
 975 000a 7A68     		ldr	r2, [r7, #4]
 976 000c 0321     		movs	r1, #3
 977 000e 0A40     		ands	r2, r1
 978 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC.c **** }
 979              		.loc 1 641 0
 980 0012 C046     		nop
 981 0014 BD46     		mov	sp, r7
 982 0016 02B0     		add	sp, sp, #8
 983              		@ sp needed
 984 0018 80BD     		pop	{r7, pc}
 985              	.L67:
 986 001a C046     		.align	2
 987              	.L66:
 988 001c 38023A40 		.word	1077543480
 989              		.cfi_endproc
 990              	.LFE14:
 991              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 992              		.section	.text.ADC_SetSatMask,"ax",%progbits
 993              		.align	2
 994              		.global	ADC_SetSatMask
 995              		.code	16
 996              		.thumb_func
 997              		.type	ADC_SetSatMask, %function
 998              	ADC_SetSatMask:
 999              	.LFB15:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 30


 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC.c **** {
 1000              		.loc 1 662 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004 0000 80B5     		push	{r7, lr}
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 7, -8
 1007              		.cfi_offset 14, -4
 1008 0002 82B0     		sub	sp, sp, #8
 1009              		.cfi_def_cfa_offset 16
 1010 0004 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 1012 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 1013              		.loc 1 663 0
 1014 0008 044B     		ldr	r3, .L69
 1015 000a 7A68     		ldr	r2, [r7, #4]
 1016 000c 0321     		movs	r1, #3
 1017 000e 0A40     		ands	r2, r1
 1018 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC.c **** }
 1019              		.loc 1 664 0
 1020 0012 C046     		nop
 1021 0014 BD46     		mov	sp, r7
 1022 0016 02B0     		add	sp, sp, #8
 1023              		@ sp needed
 1024 0018 80BD     		pop	{r7, pc}
 1025              	.L70:
 1026 001a C046     		.align	2
 1027              	.L69:
 1028 001c 28023A40 		.word	1077543464
 1029              		.cfi_endproc
 1030              	.LFE15:
 1031              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 1032              		.section	.text.ADC_SetOffset,"ax",%progbits
 1033              		.align	2
 1034              		.global	ADC_SetOffset
 1035              		.code	16
 1036              		.thumb_func
 1037              		.type	ADC_SetOffset, %function
 1038              	ADC_SetOffset:
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 31


 1039              	.LFB16:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 1040              		.loc 1 690 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 8
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044 0000 80B5     		push	{r7, lr}
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 7, -8
 1047              		.cfi_offset 14, -4
 1048 0002 82B0     		sub	sp, sp, #8
 1049              		.cfi_def_cfa_offset 16
 1050 0004 00AF     		add	r7, sp, #0
 1051              		.cfi_def_cfa_register 7
 1052 0006 7860     		str	r0, [r7, #4]
 1053 0008 0A00     		movs	r2, r1
 1054 000a BB1C     		adds	r3, r7, #2
 1055 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1056              		.loc 1 692 0
 1057 000e 7B68     		ldr	r3, [r7, #4]
 1058 0010 022B     		cmp	r3, #2
 1059 0012 02D9     		bls	.L72
 1060              		.loc 1 692 0 is_stmt 0 discriminator 1
 1061 0014 0020     		movs	r0, #0
 1062 0016 FFF7FEFF 		bl	CyHalt
 1063              	.L72:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 1064              		.loc 1 694 0 is_stmt 1
 1065 001a 054B     		ldr	r3, .L73
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 32


 1066 001c 7A68     		ldr	r2, [r7, #4]
 1067 001e 5200     		lsls	r2, r2, #1
 1068 0020 B91C     		adds	r1, r7, #2
 1069 0022 0988     		ldrh	r1, [r1]
 1070 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 1071              		.loc 1 695 0
 1072 0026 C046     		nop
 1073 0028 BD46     		mov	sp, r7
 1074 002a 02B0     		add	sp, sp, #8
 1075              		@ sp needed
 1076 002c 80BD     		pop	{r7, pc}
 1077              	.L74:
 1078 002e C046     		.align	2
 1079              	.L73:
 1080 0030 00000000 		.word	ADC_offset
 1081              		.cfi_endproc
 1082              	.LFE16:
 1083              		.size	ADC_SetOffset, .-ADC_SetOffset
 1084              		.section	.text.ADC_SetGain,"ax",%progbits
 1085              		.align	2
 1086              		.global	ADC_SetGain
 1087              		.code	16
 1088              		.thumb_func
 1089              		.type	ADC_SetGain, %function
 1090              	ADC_SetGain:
 1091              	.LFB17:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 1092              		.loc 1 724 0
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 33


 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096 0000 80B5     		push	{r7, lr}
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 7, -8
 1099              		.cfi_offset 14, -4
 1100 0002 82B0     		sub	sp, sp, #8
 1101              		.cfi_def_cfa_offset 16
 1102 0004 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 0006 7860     		str	r0, [r7, #4]
 1105 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1106              		.loc 1 726 0
 1107 000a 7B68     		ldr	r3, [r7, #4]
 1108 000c 022B     		cmp	r3, #2
 1109 000e 02D9     		bls	.L76
 1110              		.loc 1 726 0 is_stmt 0 discriminator 1
 1111 0010 0020     		movs	r0, #0
 1112 0012 FFF7FEFF 		bl	CyHalt
 1113              	.L76:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 1114              		.loc 1 728 0 is_stmt 1
 1115 0016 044B     		ldr	r3, .L77
 1116 0018 7A68     		ldr	r2, [r7, #4]
 1117 001a 9200     		lsls	r2, r2, #2
 1118 001c 3968     		ldr	r1, [r7]
 1119 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 1120              		.loc 1 729 0
 1121 0020 C046     		nop
 1122 0022 BD46     		mov	sp, r7
 1123 0024 02B0     		add	sp, sp, #8
 1124              		@ sp needed
 1125 0026 80BD     		pop	{r7, pc}
 1126              	.L78:
 1127              		.align	2
 1128              	.L77:
 1129 0028 00000000 		.word	ADC_countsPer10Volt
 1130              		.cfi_endproc
 1131              	.LFE17:
 1132              		.size	ADC_SetGain, .-ADC_SetGain
 1133              		.global	__aeabi_idiv
 1134              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 1135              		.align	2
 1136              		.global	ADC_CountsTo_mVolts
 1137              		.code	16
 1138              		.thumb_func
 1139              		.type	ADC_CountsTo_mVolts, %function
 1140              	ADC_CountsTo_mVolts:
 1141              	.LFB18:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 34


 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 1142              		.loc 1 757 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 16
 1145              		@ frame_needed = 1, uses_anonymous_args = 0
 1146 0000 80B5     		push	{r7, lr}
 1147              		.cfi_def_cfa_offset 8
 1148              		.cfi_offset 7, -8
 1149              		.cfi_offset 14, -4
 1150 0002 84B0     		sub	sp, sp, #16
 1151              		.cfi_def_cfa_offset 24
 1152 0004 00AF     		add	r7, sp, #0
 1153              		.cfi_def_cfa_register 7
 1154 0006 7860     		str	r0, [r7, #4]
 1155 0008 0A00     		movs	r2, r1
 1156 000a BB1C     		adds	r3, r7, #2
 1157 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1158              		.loc 1 761 0
 1159 000e 7B68     		ldr	r3, [r7, #4]
 1160 0010 022B     		cmp	r3, #2
 1161 0012 02D9     		bls	.L80
 1162              		.loc 1 761 0 is_stmt 0 discriminator 1
 1163 0014 0020     		movs	r0, #0
 1164 0016 FFF7FEFF 		bl	CyHalt
 1165              	.L80:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 35


 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1166              		.loc 1 772 0 is_stmt 1
 1167 001a 1E4B     		ldr	r3, .L86
 1168 001c 7A68     		ldr	r2, [r7, #4]
 1169 001e 5200     		lsls	r2, r2, #1
 1170 0020 D35A     		ldrh	r3, [r2, r3]
 1171 0022 19B2     		sxth	r1, r3
 1172 0024 BB1C     		adds	r3, r7, #2
 1173 0026 1A88     		ldrh	r2, [r3]
 1174 0028 8BB2     		uxth	r3, r1
 1175 002a D31A     		subs	r3, r2, r3
 1176 002c 9AB2     		uxth	r2, r3
 1177 002e BB1C     		adds	r3, r7, #2
 1178 0030 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1179              		.loc 1 774 0
 1180 0032 BB1C     		adds	r3, r7, #2
 1181 0034 0022     		movs	r2, #0
 1182 0036 9B5E     		ldrsh	r3, [r3, r2]
 1183 0038 174A     		ldr	r2, .L86+4
 1184 003a 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1185              		.loc 1 775 0
 1186 003c BB1C     		adds	r3, r7, #2
 1187 003e 0021     		movs	r1, #0
 1188 0040 5B5E     		ldrsh	r3, [r3, r1]
 1189 0042 002B     		cmp	r3, #0
 1190 0044 08DD     		ble	.L81
 1191              		.loc 1 775 0 is_stmt 0 discriminator 1
 1192 0046 154B     		ldr	r3, .L86+8
 1193 0048 7968     		ldr	r1, [r7, #4]
 1194 004a 8900     		lsls	r1, r1, #2
 1195 004c CB58     		ldr	r3, [r1, r3]
 1196 004e 002B     		cmp	r3, #0
 1197 0050 00DA     		bge	.L82
 1198 0052 0133     		adds	r3, r3, #1
 1199              	.L82:
 1200 0054 5B10     		asrs	r3, r3, #1
 1201 0056 08E0     		b	.L83
 1202              	.L81:
 1203              		.loc 1 775 0 discriminator 2
 1204 0058 104B     		ldr	r3, .L86+8
 1205 005a 7968     		ldr	r1, [r7, #4]
 1206 005c 8900     		lsls	r1, r1, #2
 1207 005e CB58     		ldr	r3, [r1, r3]
 1208 0060 002B     		cmp	r3, #0
 1209 0062 00DA     		bge	.L84
 1210 0064 0133     		adds	r3, r3, #1
 1211              	.L84:
 1212 0066 5B10     		asrs	r3, r3, #1
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 36


 1213 0068 5B42     		rsbs	r3, r3, #0
 1214              	.L83:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1215              		.loc 1 774 0 is_stmt 1
 1216 006a D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1217              		.loc 1 776 0
 1218 006c 0B4B     		ldr	r3, .L86+8
 1219 006e 7A68     		ldr	r2, [r7, #4]
 1220 0070 9200     		lsls	r2, r2, #2
 1221 0072 D358     		ldr	r3, [r2, r3]
 1222 0074 1900     		movs	r1, r3
 1223 0076 FFF7FEFF 		bl	__aeabi_idiv
 1224 007a 0300     		movs	r3, r0
 1225 007c 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1226              		.loc 1 774 0
 1227 007e 0E23     		movs	r3, #14
 1228 0080 FB18     		adds	r3, r7, r3
 1229 0082 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1230              		.loc 1 778 0
 1231 0084 0E23     		movs	r3, #14
 1232 0086 FB18     		adds	r3, r7, r3
 1233 0088 0022     		movs	r2, #0
 1234 008a 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/ADC.c ****     }
 1235              		.loc 1 779 0
 1236 008c 1800     		movs	r0, r3
 1237 008e BD46     		mov	sp, r7
 1238 0090 04B0     		add	sp, sp, #16
 1239              		@ sp needed
 1240 0092 80BD     		pop	{r7, pc}
 1241              	.L87:
 1242              		.align	2
 1243              	.L86:
 1244 0094 00000000 		.word	ADC_offset
 1245 0098 10270000 		.word	10000
 1246 009c 00000000 		.word	ADC_countsPer10Volt
 1247              		.cfi_endproc
 1248              	.LFE18:
 1249              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1250              		.global	__aeabi_lmul
 1251              		.global	__aeabi_ldivmod
 1252              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1253              		.align	2
 1254              		.global	ADC_CountsTo_uVolts
 1255              		.code	16
 1256              		.thumb_func
 1257              		.type	ADC_CountsTo_uVolts, %function
 1258              	ADC_CountsTo_uVolts:
 1259              	.LFB19:
 780:Generated_Source\PSoC4/ADC.c **** 
 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 37


 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 1260              		.loc 1 811 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 24
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264 0000 B0B5     		push	{r4, r5, r7, lr}
 1265              		.cfi_def_cfa_offset 16
 1266              		.cfi_offset 4, -16
 1267              		.cfi_offset 5, -12
 1268              		.cfi_offset 7, -8
 1269              		.cfi_offset 14, -4
 1270 0002 86B0     		sub	sp, sp, #24
 1271              		.cfi_def_cfa_offset 40
 1272 0004 00AF     		add	r7, sp, #0
 1273              		.cfi_def_cfa_register 7
 1274 0006 F860     		str	r0, [r7, #12]
 1275 0008 0A00     		movs	r2, r1
 1276 000a 0A23     		movs	r3, #10
 1277 000c FB18     		adds	r3, r7, r3
 1278 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1279              		.loc 1 815 0
 1280 0010 FB68     		ldr	r3, [r7, #12]
 1281 0012 022B     		cmp	r3, #2
 1282 0014 02D9     		bls	.L89
 1283              		.loc 1 815 0 is_stmt 0 discriminator 1
 1284 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 38


 1285 0018 FFF7FEFF 		bl	CyHalt
 1286              	.L89:
 816:Generated_Source\PSoC4/ADC.c **** 
 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1287              		.loc 1 826 0 is_stmt 1
 1288 001c 194B     		ldr	r3, .L91
 1289 001e FA68     		ldr	r2, [r7, #12]
 1290 0020 5200     		lsls	r2, r2, #1
 1291 0022 D35A     		ldrh	r3, [r2, r3]
 1292 0024 19B2     		sxth	r1, r3
 1293 0026 0A23     		movs	r3, #10
 1294 0028 FB18     		adds	r3, r7, r3
 1295 002a 1A88     		ldrh	r2, [r3]
 1296 002c 8BB2     		uxth	r3, r1
 1297 002e D31A     		subs	r3, r2, r3
 1298 0030 9AB2     		uxth	r2, r3
 1299 0032 0A23     		movs	r3, #10
 1300 0034 FB18     		adds	r3, r7, r3
 1301 0036 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1302              		.loc 1 828 0
 1303 0038 0A23     		movs	r3, #10
 1304 003a FB18     		adds	r3, r7, r3
 1305 003c 1B88     		ldrh	r3, [r3]
 1306 003e 1BB2     		sxth	r3, r3
 1307 0040 3B60     		str	r3, [r7]
 1308 0042 DB17     		asrs	r3, r3, #31
 1309 0044 7B60     		str	r3, [r7, #4]
 1310 0046 104A     		ldr	r2, .L91+4
 1311 0048 0023     		movs	r3, #0
 1312 004a 3868     		ldr	r0, [r7]
 1313 004c 7968     		ldr	r1, [r7, #4]
 1314 004e FFF7FEFF 		bl	__aeabi_lmul
 1315 0052 0200     		movs	r2, r0
 1316 0054 0B00     		movs	r3, r1
 1317 0056 1000     		movs	r0, r2
 1318 0058 1900     		movs	r1, r3
 1319 005a 0C4B     		ldr	r3, .L91+8
 1320 005c FA68     		ldr	r2, [r7, #12]
 1321 005e 9200     		lsls	r2, r2, #2
 1322 0060 D358     		ldr	r3, [r2, r3]
 1323 0062 1C00     		movs	r4, r3
 1324 0064 DB17     		asrs	r3, r3, #31
 1325 0066 1D00     		movs	r5, r3
 1326 0068 2200     		movs	r2, r4
 1327 006a 2B00     		movs	r3, r5
 1328 006c FFF7FEFF 		bl	__aeabi_ldivmod
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 39


 1329 0070 0300     		movs	r3, r0
 1330 0072 0C00     		movs	r4, r1
 1331 0074 3B61     		str	r3, [r7, #16]
 1332 0076 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1333              		.loc 1 830 0
 1334 0078 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC.c ****     }
 1335              		.loc 1 831 0
 1336 007a 1800     		movs	r0, r3
 1337 007c BD46     		mov	sp, r7
 1338 007e 06B0     		add	sp, sp, #24
 1339              		@ sp needed
 1340 0080 B0BD     		pop	{r4, r5, r7, pc}
 1341              	.L92:
 1342 0082 C046     		.align	2
 1343              	.L91:
 1344 0084 00000000 		.word	ADC_offset
 1345 0088 80969800 		.word	10000000
 1346 008c 00000000 		.word	ADC_countsPer10Volt
 1347              		.cfi_endproc
 1348              	.LFE19:
 1349              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1350              		.global	__aeabi_i2f
 1351              		.global	__aeabi_fmul
 1352              		.global	__aeabi_fdiv
 1353              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1354              		.align	2
 1355              		.global	ADC_CountsTo_Volts
 1356              		.code	16
 1357              		.thumb_func
 1358              		.type	ADC_CountsTo_Volts, %function
 1359              	ADC_CountsTo_Volts:
 1360              	.LFB20:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 40


 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 1361              		.loc 1 856 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 16
 1364              		@ frame_needed = 1, uses_anonymous_args = 0
 1365 0000 90B5     		push	{r4, r7, lr}
 1366              		.cfi_def_cfa_offset 12
 1367              		.cfi_offset 4, -12
 1368              		.cfi_offset 7, -8
 1369              		.cfi_offset 14, -4
 1370 0002 85B0     		sub	sp, sp, #20
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
 1373              		.cfi_def_cfa_register 7
 1374 0006 7860     		str	r0, [r7, #4]
 1375 0008 0A00     		movs	r2, r1
 1376 000a BB1C     		adds	r3, r7, #2
 1377 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1378              		.loc 1 860 0
 1379 000e 7B68     		ldr	r3, [r7, #4]
 1380 0010 022B     		cmp	r3, #2
 1381 0012 02D9     		bls	.L94
 1382              		.loc 1 860 0 is_stmt 0 discriminator 1
 1383 0014 0020     		movs	r0, #0
 1384 0016 FFF7FEFF 		bl	CyHalt
 1385              	.L94:
 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1386              		.loc 1 871 0 is_stmt 1
 1387 001a 164B     		ldr	r3, .L96
 1388 001c 7A68     		ldr	r2, [r7, #4]
 1389 001e 5200     		lsls	r2, r2, #1
 1390 0020 D35A     		ldrh	r3, [r2, r3]
 1391 0022 19B2     		sxth	r1, r3
 1392 0024 BB1C     		adds	r3, r7, #2
 1393 0026 1A88     		ldrh	r2, [r3]
 1394 0028 8BB2     		uxth	r3, r1
 1395 002a D31A     		subs	r3, r2, r3
 1396 002c 9AB2     		uxth	r2, r3
 1397 002e BB1C     		adds	r3, r7, #2
 1398 0030 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 41


 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1399              		.loc 1 873 0
 1400 0032 BB1C     		adds	r3, r7, #2
 1401 0034 0022     		movs	r2, #0
 1402 0036 9B5E     		ldrsh	r3, [r3, r2]
 1403 0038 1800     		movs	r0, r3
 1404 003a FFF7FEFF 		bl	__aeabi_i2f
 1405 003e 031C     		adds	r3, r0, #0
 1406 0040 0D49     		ldr	r1, .L96+4
 1407 0042 181C     		adds	r0, r3, #0
 1408 0044 FFF7FEFF 		bl	__aeabi_fmul
 1409 0048 031C     		adds	r3, r0, #0
 1410 004a 1C1C     		adds	r4, r3, #0
 1411 004c 0B4B     		ldr	r3, .L96+8
 1412 004e 7A68     		ldr	r2, [r7, #4]
 1413 0050 9200     		lsls	r2, r2, #2
 1414 0052 D358     		ldr	r3, [r2, r3]
 1415 0054 1800     		movs	r0, r3
 1416 0056 FFF7FEFF 		bl	__aeabi_i2f
 1417 005a 031C     		adds	r3, r0, #0
 1418 005c 191C     		adds	r1, r3, #0
 1419 005e 201C     		adds	r0, r4, #0
 1420 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1421 0064 031C     		adds	r3, r0, #0
 1422 0066 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 1423              		.loc 1 875 0
 1424 0068 FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC.c ****     }
 1425              		.loc 1 876 0
 1426 006a 181C     		adds	r0, r3, #0
 1427 006c BD46     		mov	sp, r7
 1428 006e 05B0     		add	sp, sp, #20
 1429              		@ sp needed
 1430 0070 90BD     		pop	{r4, r7, pc}
 1431              	.L97:
 1432 0072 C046     		.align	2
 1433              	.L96:
 1434 0074 00000000 		.word	ADC_offset
 1435 0078 00002041 		.word	1092616192
 1436 007c 00000000 		.word	ADC_countsPer10Volt
 1437              		.cfi_endproc
 1438              	.LFE20:
 1439              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1440              		.section	.rodata
 1441              		.align	2
 1442              		.type	ADC_InputsPlacement.4913, %object
 1443              		.size	ADC_InputsPlacement.4913, 3
 1444              	ADC_InputsPlacement.4913:
 1445 000c 00       		.byte	0
 1446 000d 01       		.byte	1
 1447 000e 70       		.byte	112
 1448              		.text
 1449              	.Letext0:
 1450              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1451              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 42


 1452              	.Ldebug_info0:
 1453 0000 CA040000 		.4byte	0x4ca
 1454 0004 0400     		.2byte	0x4
 1455 0006 00000000 		.4byte	.Ldebug_abbrev0
 1456 000a 04       		.byte	0x4
 1457 000b 01       		.uleb128 0x1
 1458 000c C6010000 		.4byte	.LASF62
 1459 0010 0C       		.byte	0xc
 1460 0011 D6020000 		.4byte	.LASF63
 1461 0015 8F000000 		.4byte	.LASF64
 1462 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1463 001d 00000000 		.4byte	0
 1464 0021 00000000 		.4byte	.Ldebug_line0
 1465 0025 02       		.uleb128 0x2
 1466 0026 01       		.byte	0x1
 1467 0027 06       		.byte	0x6
 1468 0028 7C000000 		.4byte	.LASF0
 1469 002c 02       		.uleb128 0x2
 1470 002d 01       		.byte	0x1
 1471 002e 08       		.byte	0x8
 1472 002f 33030000 		.4byte	.LASF1
 1473 0033 02       		.uleb128 0x2
 1474 0034 02       		.byte	0x2
 1475 0035 05       		.byte	0x5
 1476 0036 4C030000 		.4byte	.LASF2
 1477 003a 02       		.uleb128 0x2
 1478 003b 02       		.byte	0x2
 1479 003c 07       		.byte	0x7
 1480 003d A3010000 		.4byte	.LASF3
 1481 0041 02       		.uleb128 0x2
 1482 0042 04       		.byte	0x4
 1483 0043 05       		.byte	0x5
 1484 0044 EF000000 		.4byte	.LASF4
 1485 0048 02       		.uleb128 0x2
 1486 0049 04       		.byte	0x4
 1487 004a 07       		.byte	0x7
 1488 004b 72010000 		.4byte	.LASF5
 1489 004f 02       		.uleb128 0x2
 1490 0050 08       		.byte	0x8
 1491 0051 05       		.byte	0x5
 1492 0052 6E000000 		.4byte	.LASF6
 1493 0056 02       		.uleb128 0x2
 1494 0057 08       		.byte	0x8
 1495 0058 07       		.byte	0x7
 1496 0059 32000000 		.4byte	.LASF7
 1497 005d 03       		.uleb128 0x3
 1498 005e 04       		.byte	0x4
 1499 005f 05       		.byte	0x5
 1500 0060 696E7400 		.ascii	"int\000"
 1501 0064 02       		.uleb128 0x2
 1502 0065 04       		.byte	0x4
 1503 0066 07       		.byte	0x7
 1504 0067 5E010000 		.4byte	.LASF8
 1505 006b 04       		.uleb128 0x4
 1506 006c 20010000 		.4byte	.LASF9
 1507 0070 02       		.byte	0x2
 1508 0071 D201     		.2byte	0x1d2
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 43


 1509 0073 2C000000 		.4byte	0x2c
 1510 0077 04       		.uleb128 0x4
 1511 0078 00000000 		.4byte	.LASF10
 1512 007c 02       		.byte	0x2
 1513 007d D301     		.2byte	0x1d3
 1514 007f 3A000000 		.4byte	0x3a
 1515 0083 04       		.uleb128 0x4
 1516 0084 2D010000 		.4byte	.LASF11
 1517 0088 02       		.byte	0x2
 1518 0089 D401     		.2byte	0x1d4
 1519 008b 48000000 		.4byte	0x48
 1520 008f 04       		.uleb128 0x4
 1521 0090 9E030000 		.4byte	.LASF12
 1522 0094 02       		.byte	0x2
 1523 0095 D601     		.2byte	0x1d6
 1524 0097 33000000 		.4byte	0x33
 1525 009b 04       		.uleb128 0x4
 1526 009c DF000000 		.4byte	.LASF13
 1527 00a0 02       		.byte	0x2
 1528 00a1 D701     		.2byte	0x1d7
 1529 00a3 41000000 		.4byte	0x41
 1530 00a7 04       		.uleb128 0x4
 1531 00a8 61020000 		.4byte	.LASF14
 1532 00ac 02       		.byte	0x2
 1533 00ad D801     		.2byte	0x1d8
 1534 00af B3000000 		.4byte	0xb3
 1535 00b3 02       		.uleb128 0x2
 1536 00b4 04       		.byte	0x4
 1537 00b5 04       		.byte	0x4
 1538 00b6 FF020000 		.4byte	.LASF15
 1539 00ba 02       		.uleb128 0x2
 1540 00bb 08       		.byte	0x8
 1541 00bc 04       		.byte	0x4
 1542 00bd 26010000 		.4byte	.LASF16
 1543 00c1 04       		.uleb128 0x4
 1544 00c2 C0020000 		.4byte	.LASF17
 1545 00c6 02       		.byte	0x2
 1546 00c7 DD01     		.2byte	0x1dd
 1547 00c9 4F000000 		.4byte	0x4f
 1548 00cd 02       		.uleb128 0x2
 1549 00ce 01       		.byte	0x1
 1550 00cf 08       		.byte	0x8
 1551 00d0 6A030000 		.4byte	.LASF18
 1552 00d4 04       		.uleb128 0x4
 1553 00d5 5B020000 		.4byte	.LASF19
 1554 00d9 02       		.byte	0x2
 1555 00da 7E02     		.2byte	0x27e
 1556 00dc E0000000 		.4byte	0xe0
 1557 00e0 05       		.uleb128 0x5
 1558 00e1 83000000 		.4byte	0x83
 1559 00e5 02       		.uleb128 0x2
 1560 00e6 08       		.byte	0x8
 1561 00e7 04       		.byte	0x4
 1562 00e8 7B020000 		.4byte	.LASF20
 1563 00ec 02       		.uleb128 0x2
 1564 00ed 04       		.byte	0x4
 1565 00ee 07       		.byte	0x7
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 44


 1566 00ef 69020000 		.4byte	.LASF21
 1567 00f3 06       		.uleb128 0x6
 1568 00f4 E5000000 		.4byte	.LASF26
 1569 00f8 01       		.byte	0x1
 1570 00f9 3F       		.byte	0x3f
 1571 00fa 00000000 		.4byte	.LFB2
 1572 00fe 24000000 		.4byte	.LFE2-.LFB2
 1573 0102 01       		.uleb128 0x1
 1574 0103 9C       		.byte	0x9c
 1575 0104 07       		.uleb128 0x7
 1576 0105 29000000 		.4byte	.LASF37
 1577 0109 01       		.byte	0x1
 1578 010a 5E       		.byte	0x5e
 1579 010b 00000000 		.4byte	.LFB3
 1580 010f 6C020000 		.4byte	.LFE3-.LFB3
 1581 0113 01       		.uleb128 0x1
 1582 0114 9C       		.byte	0x9c
 1583 0115 55010000 		.4byte	0x155
 1584 0119 08       		.uleb128 0x8
 1585 011a 5F030000 		.4byte	.LASF22
 1586 011e 01       		.byte	0x1
 1587 011f 60       		.byte	0x60
 1588 0120 83000000 		.4byte	0x83
 1589 0124 02       		.uleb128 0x2
 1590 0125 91       		.byte	0x91
 1591 0126 74       		.sleb128 -12
 1592 0127 08       		.uleb128 0x8
 1593 0128 99010000 		.4byte	.LASF23
 1594 012c 01       		.byte	0x1
 1595 012d 61       		.byte	0x61
 1596 012e 83000000 		.4byte	0x83
 1597 0132 02       		.uleb128 0x2
 1598 0133 91       		.byte	0x91
 1599 0134 6C       		.sleb128 -20
 1600 0135 08       		.uleb128 0x8
 1601 0136 0F000000 		.4byte	.LASF24
 1602 013a 01       		.byte	0x1
 1603 013b 62       		.byte	0x62
 1604 013c 9B000000 		.4byte	0x9b
 1605 0140 02       		.uleb128 0x2
 1606 0141 91       		.byte	0x91
 1607 0142 70       		.sleb128 -16
 1608 0143 08       		.uleb128 0x8
 1609 0144 49000000 		.4byte	.LASF25
 1610 0148 01       		.byte	0x1
 1611 0149 65       		.byte	0x65
 1612 014a 6A010000 		.4byte	0x16a
 1613 014e 05       		.uleb128 0x5
 1614 014f 03       		.byte	0x3
 1615 0150 0C000000 		.4byte	ADC_InputsPlacement.4913
 1616 0154 00       		.byte	0
 1617 0155 09       		.uleb128 0x9
 1618 0156 65010000 		.4byte	0x165
 1619 015a 65010000 		.4byte	0x165
 1620 015e 0A       		.uleb128 0xa
 1621 015f EC000000 		.4byte	0xec
 1622 0163 02       		.byte	0x2
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 45


 1623 0164 00       		.byte	0
 1624 0165 0B       		.uleb128 0xb
 1625 0166 6B000000 		.4byte	0x6b
 1626 016a 0B       		.uleb128 0xb
 1627 016b 55010000 		.4byte	0x155
 1628 016f 0C       		.uleb128 0xc
 1629 0170 93030000 		.4byte	.LASF27
 1630 0174 01       		.byte	0x1
 1631 0175 4A01     		.2byte	0x14a
 1632 0177 00000000 		.4byte	.LFB4
 1633 017b 38000000 		.4byte	.LFE4-.LFB4
 1634 017f 01       		.uleb128 0x1
 1635 0180 9C       		.byte	0x9c
 1636 0181 0D       		.uleb128 0xd
 1637 0182 56030000 		.4byte	.LASF28
 1638 0186 01       		.byte	0x1
 1639 0187 6D01     		.2byte	0x16d
 1640 0189 00000000 		.4byte	.LFB5
 1641 018d 1C000000 		.4byte	.LFE5-.LFB5
 1642 0191 01       		.uleb128 0x1
 1643 0192 9C       		.byte	0x9c
 1644 0193 0D       		.uleb128 0xd
 1645 0194 5D000000 		.4byte	.LASF29
 1646 0198 01       		.byte	0x1
 1647 0199 8701     		.2byte	0x187
 1648 019b 00000000 		.4byte	.LFB6
 1649 019f 14000000 		.4byte	.LFE6-.LFB6
 1650 01a3 01       		.uleb128 0x1
 1651 01a4 9C       		.byte	0x9c
 1652 01a5 0D       		.uleb128 0xd
 1653 01a6 B6010000 		.4byte	.LASF30
 1654 01aa 01       		.byte	0x1
 1655 01ab A001     		.2byte	0x1a0
 1656 01ad 00000000 		.4byte	.LFB7
 1657 01b1 0A000000 		.4byte	.LFE7-.LFB7
 1658 01b5 01       		.uleb128 0x1
 1659 01b6 9C       		.byte	0x9c
 1660 01b7 0E       		.uleb128 0xe
 1661 01b8 AC020000 		.4byte	.LASF32
 1662 01bc 01       		.byte	0x1
 1663 01bd C201     		.2byte	0x1c2
 1664 01bf 83000000 		.4byte	0x83
 1665 01c3 00000000 		.4byte	.LFB8
 1666 01c7 7C000000 		.4byte	.LFE8-.LFB8
 1667 01cb 01       		.uleb128 0x1
 1668 01cc 9C       		.byte	0x9c
 1669 01cd F0010000 		.4byte	0x1f0
 1670 01d1 0F       		.uleb128 0xf
 1671 01d2 45010000 		.4byte	.LASF34
 1672 01d6 01       		.byte	0x1
 1673 01d7 C201     		.2byte	0x1c2
 1674 01d9 83000000 		.4byte	0x83
 1675 01dd 02       		.uleb128 0x2
 1676 01de 91       		.byte	0x91
 1677 01df 6C       		.sleb128 -20
 1678 01e0 10       		.uleb128 0x10
 1679 01e1 88000000 		.4byte	.LASF31
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 46


 1680 01e5 01       		.byte	0x1
 1681 01e6 C401     		.2byte	0x1c4
 1682 01e8 83000000 		.4byte	0x83
 1683 01ec 02       		.uleb128 0x2
 1684 01ed 91       		.byte	0x91
 1685 01ee 74       		.sleb128 -12
 1686 01ef 00       		.byte	0
 1687 01f0 11       		.uleb128 0x11
 1688 01f1 B9030000 		.4byte	.LASF33
 1689 01f5 01       		.byte	0x1
 1690 01f6 F801     		.2byte	0x1f8
 1691 01f8 8F000000 		.4byte	0x8f
 1692 01fc 00000000 		.4byte	.LFB9
 1693 0200 4C000000 		.4byte	.LFE9-.LFB9
 1694 0204 01       		.uleb128 0x1
 1695 0205 9C       		.byte	0x9c
 1696 0206 29020000 		.4byte	0x229
 1697 020a 0F       		.uleb128 0xf
 1698 020b 65030000 		.4byte	.LASF35
 1699 020f 01       		.byte	0x1
 1700 0210 F801     		.2byte	0x1f8
 1701 0212 83000000 		.4byte	0x83
 1702 0216 02       		.uleb128 0x2
 1703 0217 91       		.byte	0x91
 1704 0218 6C       		.sleb128 -20
 1705 0219 10       		.uleb128 0x10
 1706 021a B2030000 		.4byte	.LASF36
 1707 021e 01       		.byte	0x1
 1708 021f FA01     		.2byte	0x1fa
 1709 0221 83000000 		.4byte	0x83
 1710 0225 02       		.uleb128 0x2
 1711 0226 91       		.byte	0x91
 1712 0227 74       		.sleb128 -12
 1713 0228 00       		.byte	0
 1714 0229 12       		.uleb128 0x12
 1715 022a C6020000 		.4byte	.LASF38
 1716 022e 01       		.byte	0x1
 1717 022f 2502     		.2byte	0x225
 1718 0231 00000000 		.4byte	.LFB10
 1719 0235 20000000 		.4byte	.LFE10-.LFB10
 1720 0239 01       		.uleb128 0x1
 1721 023a 9C       		.byte	0x9c
 1722 023b 4F020000 		.4byte	0x24f
 1723 023f 0F       		.uleb128 0xf
 1724 0240 34010000 		.4byte	.LASF39
 1725 0244 01       		.byte	0x1
 1726 0245 2502     		.2byte	0x225
 1727 0247 83000000 		.4byte	0x83
 1728 024b 02       		.uleb128 0x2
 1729 024c 91       		.byte	0x91
 1730 024d 74       		.sleb128 -12
 1731 024e 00       		.byte	0
 1732 024f 0D       		.uleb128 0xd
 1733 0250 98020000 		.4byte	.LASF40
 1734 0254 01       		.byte	0x1
 1735 0255 3B02     		.2byte	0x23b
 1736 0257 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 47


 1737 025b 1C000000 		.4byte	.LFE11-.LFB11
 1738 025f 01       		.uleb128 0x1
 1739 0260 9C       		.byte	0x9c
 1740 0261 12       		.uleb128 0x12
 1741 0262 23030000 		.4byte	.LASF41
 1742 0266 01       		.byte	0x1
 1743 0267 5102     		.2byte	0x251
 1744 0269 00000000 		.4byte	.LFB12
 1745 026d 30000000 		.4byte	.LFE12-.LFB12
 1746 0271 01       		.uleb128 0x1
 1747 0272 9C       		.byte	0x9c
 1748 0273 87020000 		.4byte	0x287
 1749 0277 0F       		.uleb128 0xf
 1750 0278 72020000 		.4byte	.LASF42
 1751 027c 01       		.byte	0x1
 1752 027d 5102     		.2byte	0x251
 1753 027f 83000000 		.4byte	0x83
 1754 0283 02       		.uleb128 0x2
 1755 0284 91       		.byte	0x91
 1756 0285 74       		.sleb128 -12
 1757 0286 00       		.byte	0
 1758 0287 12       		.uleb128 0x12
 1759 0288 87020000 		.4byte	.LASF43
 1760 028c 01       		.byte	0x1
 1761 028d 6602     		.2byte	0x266
 1762 028f 00000000 		.4byte	.LFB13
 1763 0293 30000000 		.4byte	.LFE13-.LFB13
 1764 0297 01       		.uleb128 0x1
 1765 0298 9C       		.byte	0x9c
 1766 0299 AD020000 		.4byte	0x2ad
 1767 029d 0F       		.uleb128 0xf
 1768 029e 05030000 		.4byte	.LASF44
 1769 02a2 01       		.byte	0x1
 1770 02a3 6602     		.2byte	0x266
 1771 02a5 83000000 		.4byte	0x83
 1772 02a9 02       		.uleb128 0x2
 1773 02aa 91       		.byte	0x91
 1774 02ab 74       		.sleb128 -12
 1775 02ac 00       		.byte	0
 1776 02ad 12       		.uleb128 0x12
 1777 02ae 4D010000 		.4byte	.LASF45
 1778 02b2 01       		.byte	0x1
 1779 02b3 7E02     		.2byte	0x27e
 1780 02b5 00000000 		.4byte	.LFB14
 1781 02b9 20000000 		.4byte	.LFE14-.LFB14
 1782 02bd 01       		.uleb128 0x1
 1783 02be 9C       		.byte	0x9c
 1784 02bf D3020000 		.4byte	0x2d3
 1785 02c3 0F       		.uleb128 0xf
 1786 02c4 34010000 		.4byte	.LASF39
 1787 02c8 01       		.byte	0x1
 1788 02c9 7E02     		.2byte	0x27e
 1789 02cb 83000000 		.4byte	0x83
 1790 02cf 02       		.uleb128 0x2
 1791 02d0 91       		.byte	0x91
 1792 02d1 74       		.sleb128 -12
 1793 02d2 00       		.byte	0
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 48


 1794 02d3 12       		.uleb128 0x12
 1795 02d4 84010000 		.4byte	.LASF46
 1796 02d8 01       		.byte	0x1
 1797 02d9 9502     		.2byte	0x295
 1798 02db 00000000 		.4byte	.LFB15
 1799 02df 20000000 		.4byte	.LFE15-.LFB15
 1800 02e3 01       		.uleb128 0x1
 1801 02e4 9C       		.byte	0x9c
 1802 02e5 F9020000 		.4byte	0x2f9
 1803 02e9 0F       		.uleb128 0xf
 1804 02ea 34010000 		.4byte	.LASF39
 1805 02ee 01       		.byte	0x1
 1806 02ef 9502     		.2byte	0x295
 1807 02f1 83000000 		.4byte	0x83
 1808 02f5 02       		.uleb128 0x2
 1809 02f6 91       		.byte	0x91
 1810 02f7 74       		.sleb128 -12
 1811 02f8 00       		.byte	0
 1812 02f9 13       		.uleb128 0x13
 1813 02fa A4030000 		.4byte	.LASF47
 1814 02fe 01       		.byte	0x1
 1815 02ff B102     		.2byte	0x2b1
 1816 0301 00000000 		.4byte	.LFB16
 1817 0305 34000000 		.4byte	.LFE16-.LFB16
 1818 0309 01       		.uleb128 0x1
 1819 030a 9C       		.byte	0x9c
 1820 030b 2E030000 		.4byte	0x32e
 1821 030f 0F       		.uleb128 0xf
 1822 0310 65030000 		.4byte	.LASF35
 1823 0314 01       		.byte	0x1
 1824 0315 B102     		.2byte	0x2b1
 1825 0317 83000000 		.4byte	0x83
 1826 031b 02       		.uleb128 0x2
 1827 031c 91       		.byte	0x91
 1828 031d 74       		.sleb128 -12
 1829 031e 0F       		.uleb128 0xf
 1830 031f 82030000 		.4byte	.LASF48
 1831 0323 01       		.byte	0x1
 1832 0324 B102     		.2byte	0x2b1
 1833 0326 8F000000 		.4byte	0x8f
 1834 032a 02       		.uleb128 0x2
 1835 032b 91       		.byte	0x91
 1836 032c 72       		.sleb128 -14
 1837 032d 00       		.byte	0
 1838 032e 13       		.uleb128 0x13
 1839 032f F3020000 		.4byte	.LASF49
 1840 0333 01       		.byte	0x1
 1841 0334 D302     		.2byte	0x2d3
 1842 0336 00000000 		.4byte	.LFB17
 1843 033a 2C000000 		.4byte	.LFE17-.LFB17
 1844 033e 01       		.uleb128 0x1
 1845 033f 9C       		.byte	0x9c
 1846 0340 63030000 		.4byte	0x363
 1847 0344 0F       		.uleb128 0xf
 1848 0345 65030000 		.4byte	.LASF35
 1849 0349 01       		.byte	0x1
 1850 034a D302     		.2byte	0x2d3
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 49


 1851 034c 83000000 		.4byte	0x83
 1852 0350 02       		.uleb128 0x2
 1853 0351 91       		.byte	0x91
 1854 0352 74       		.sleb128 -12
 1855 0353 0F       		.uleb128 0xf
 1856 0354 07000000 		.4byte	.LASF50
 1857 0358 01       		.byte	0x1
 1858 0359 D302     		.2byte	0x2d3
 1859 035b 9B000000 		.4byte	0x9b
 1860 035f 02       		.uleb128 0x2
 1861 0360 91       		.byte	0x91
 1862 0361 70       		.sleb128 -16
 1863 0362 00       		.byte	0
 1864 0363 11       		.uleb128 0x11
 1865 0364 0F030000 		.4byte	.LASF51
 1866 0368 01       		.byte	0x1
 1867 0369 F402     		.2byte	0x2f4
 1868 036b 8F000000 		.4byte	0x8f
 1869 036f 00000000 		.4byte	.LFB18
 1870 0373 A0000000 		.4byte	.LFE18-.LFB18
 1871 0377 01       		.uleb128 0x1
 1872 0378 9C       		.byte	0x9c
 1873 0379 AB030000 		.4byte	0x3ab
 1874 037d 0F       		.uleb128 0xf
 1875 037e 65030000 		.4byte	.LASF35
 1876 0382 01       		.byte	0x1
 1877 0383 F402     		.2byte	0x2f4
 1878 0385 83000000 		.4byte	0x83
 1879 0389 02       		.uleb128 0x2
 1880 038a 91       		.byte	0x91
 1881 038b 6C       		.sleb128 -20
 1882 038c 0F       		.uleb128 0xf
 1883 038d 89030000 		.4byte	.LASF52
 1884 0391 01       		.byte	0x1
 1885 0392 F402     		.2byte	0x2f4
 1886 0394 8F000000 		.4byte	0x8f
 1887 0398 02       		.uleb128 0x2
 1888 0399 91       		.byte	0x91
 1889 039a 6A       		.sleb128 -22
 1890 039b 10       		.uleb128 0x10
 1891 039c 54020000 		.4byte	.LASF53
 1892 03a0 01       		.byte	0x1
 1893 03a1 F602     		.2byte	0x2f6
 1894 03a3 8F000000 		.4byte	0x8f
 1895 03a7 02       		.uleb128 0x2
 1896 03a8 91       		.byte	0x91
 1897 03a9 76       		.sleb128 -10
 1898 03aa 00       		.byte	0
 1899 03ab 11       		.uleb128 0x11
 1900 03ac F8000000 		.4byte	.LASF54
 1901 03b0 01       		.byte	0x1
 1902 03b1 2A03     		.2byte	0x32a
 1903 03b3 9B000000 		.4byte	0x9b
 1904 03b7 00000000 		.4byte	.LFB19
 1905 03bb 90000000 		.4byte	.LFE19-.LFB19
 1906 03bf 01       		.uleb128 0x1
 1907 03c0 9C       		.byte	0x9c
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 50


 1908 03c1 F3030000 		.4byte	0x3f3
 1909 03c5 0F       		.uleb128 0xf
 1910 03c6 65030000 		.4byte	.LASF35
 1911 03ca 01       		.byte	0x1
 1912 03cb 2A03     		.2byte	0x32a
 1913 03cd 83000000 		.4byte	0x83
 1914 03d1 02       		.uleb128 0x2
 1915 03d2 91       		.byte	0x91
 1916 03d3 64       		.sleb128 -28
 1917 03d4 0F       		.uleb128 0xf
 1918 03d5 89030000 		.4byte	.LASF52
 1919 03d9 01       		.byte	0x1
 1920 03da 2A03     		.2byte	0x32a
 1921 03dc 8F000000 		.4byte	0x8f
 1922 03e0 02       		.uleb128 0x2
 1923 03e1 91       		.byte	0x91
 1924 03e2 62       		.sleb128 -30
 1925 03e3 10       		.uleb128 0x10
 1926 03e4 6B010000 		.4byte	.LASF55
 1927 03e8 01       		.byte	0x1
 1928 03e9 2C03     		.2byte	0x32c
 1929 03eb C1000000 		.4byte	0xc1
 1930 03ef 02       		.uleb128 0x2
 1931 03f0 91       		.byte	0x91
 1932 03f1 68       		.sleb128 -24
 1933 03f2 00       		.byte	0
 1934 03f3 11       		.uleb128 0x11
 1935 03f4 16000000 		.4byte	.LASF56
 1936 03f8 01       		.byte	0x1
 1937 03f9 5703     		.2byte	0x357
 1938 03fb A7000000 		.4byte	0xa7
 1939 03ff 00000000 		.4byte	.LFB20
 1940 0403 80000000 		.4byte	.LFE20-.LFB20
 1941 0407 01       		.uleb128 0x1
 1942 0408 9C       		.byte	0x9c
 1943 0409 3B040000 		.4byte	0x43b
 1944 040d 0F       		.uleb128 0xf
 1945 040e 65030000 		.4byte	.LASF35
 1946 0412 01       		.byte	0x1
 1947 0413 5703     		.2byte	0x357
 1948 0415 83000000 		.4byte	0x83
 1949 0419 02       		.uleb128 0x2
 1950 041a 91       		.byte	0x91
 1951 041b 64       		.sleb128 -28
 1952 041c 0F       		.uleb128 0xf
 1953 041d 89030000 		.4byte	.LASF52
 1954 0421 01       		.byte	0x1
 1955 0422 5703     		.2byte	0x357
 1956 0424 8F000000 		.4byte	0x8f
 1957 0428 02       		.uleb128 0x2
 1958 0429 91       		.byte	0x91
 1959 042a 62       		.sleb128 -30
 1960 042b 10       		.uleb128 0x10
 1961 042c 93010000 		.4byte	.LASF57
 1962 0430 01       		.byte	0x1
 1963 0431 5903     		.2byte	0x359
 1964 0433 A7000000 		.4byte	0xa7
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 51


 1965 0437 02       		.uleb128 0x2
 1966 0438 91       		.byte	0x91
 1967 0439 6C       		.sleb128 -20
 1968 043a 00       		.byte	0
 1969 043b 09       		.uleb128 0x9
 1970 043c 4B040000 		.4byte	0x44b
 1971 0440 4B040000 		.4byte	0x44b
 1972 0444 0A       		.uleb128 0xa
 1973 0445 EC000000 		.4byte	0xec
 1974 0449 02       		.byte	0x2
 1975 044a 00       		.byte	0
 1976 044b 0B       		.uleb128 0xb
 1977 044c 83000000 		.4byte	0x83
 1978 0450 08       		.uleb128 0x8
 1979 0451 6F030000 		.4byte	.LASF58
 1980 0455 01       		.byte	0x1
 1981 0456 21       		.byte	0x21
 1982 0457 61040000 		.4byte	0x461
 1983 045b 05       		.uleb128 0x5
 1984 045c 03       		.byte	0x3
 1985 045d 00000000 		.4byte	ADC_channelsConfig
 1986 0461 0B       		.uleb128 0xb
 1987 0462 3B040000 		.4byte	0x43b
 1988 0466 14       		.uleb128 0x14
 1989 0467 39010000 		.4byte	.LASF59
 1990 046b 01       		.byte	0x1
 1991 046c 18       		.byte	0x18
 1992 046d 6B000000 		.4byte	0x6b
 1993 0471 05       		.uleb128 0x5
 1994 0472 03       		.byte	0x3
 1995 0473 00000000 		.4byte	ADC_initVar
 1996 0477 09       		.uleb128 0x9
 1997 0478 87040000 		.4byte	0x487
 1998 047c 87040000 		.4byte	0x487
 1999 0480 0A       		.uleb128 0xa
 2000 0481 EC000000 		.4byte	0xec
 2001 0485 02       		.byte	0x2
 2002 0486 00       		.byte	0
 2003 0487 05       		.uleb128 0x5
 2004 0488 8F000000 		.4byte	0x8f
 2005 048c 14       		.uleb128 0x14
 2006 048d 41030000 		.4byte	.LASF60
 2007 0491 01       		.byte	0x1
 2008 0492 19       		.byte	0x19
 2009 0493 9D040000 		.4byte	0x49d
 2010 0497 05       		.uleb128 0x5
 2011 0498 03       		.byte	0x3
 2012 0499 00000000 		.4byte	ADC_offset
 2013 049d 05       		.uleb128 0x5
 2014 049e 77040000 		.4byte	0x477
 2015 04a2 09       		.uleb128 0x9
 2016 04a3 B2040000 		.4byte	0x4b2
 2017 04a7 B2040000 		.4byte	0x4b2
 2018 04ab 0A       		.uleb128 0xa
 2019 04ac EC000000 		.4byte	0xec
 2020 04b0 02       		.byte	0x2
 2021 04b1 00       		.byte	0
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 52


 2022 04b2 05       		.uleb128 0x5
 2023 04b3 9B000000 		.4byte	0x9b
 2024 04b7 14       		.uleb128 0x14
 2025 04b8 0C010000 		.4byte	.LASF61
 2026 04bc 01       		.byte	0x1
 2027 04bd 1A       		.byte	0x1a
 2028 04be C8040000 		.4byte	0x4c8
 2029 04c2 05       		.uleb128 0x5
 2030 04c3 03       		.byte	0x3
 2031 04c4 00000000 		.4byte	ADC_countsPer10Volt
 2032 04c8 05       		.uleb128 0x5
 2033 04c9 A2040000 		.4byte	0x4a2
 2034 04cd 00       		.byte	0
 2035              		.section	.debug_abbrev,"",%progbits
 2036              	.Ldebug_abbrev0:
 2037 0000 01       		.uleb128 0x1
 2038 0001 11       		.uleb128 0x11
 2039 0002 01       		.byte	0x1
 2040 0003 25       		.uleb128 0x25
 2041 0004 0E       		.uleb128 0xe
 2042 0005 13       		.uleb128 0x13
 2043 0006 0B       		.uleb128 0xb
 2044 0007 03       		.uleb128 0x3
 2045 0008 0E       		.uleb128 0xe
 2046 0009 1B       		.uleb128 0x1b
 2047 000a 0E       		.uleb128 0xe
 2048 000b 55       		.uleb128 0x55
 2049 000c 17       		.uleb128 0x17
 2050 000d 11       		.uleb128 0x11
 2051 000e 01       		.uleb128 0x1
 2052 000f 10       		.uleb128 0x10
 2053 0010 17       		.uleb128 0x17
 2054 0011 00       		.byte	0
 2055 0012 00       		.byte	0
 2056 0013 02       		.uleb128 0x2
 2057 0014 24       		.uleb128 0x24
 2058 0015 00       		.byte	0
 2059 0016 0B       		.uleb128 0xb
 2060 0017 0B       		.uleb128 0xb
 2061 0018 3E       		.uleb128 0x3e
 2062 0019 0B       		.uleb128 0xb
 2063 001a 03       		.uleb128 0x3
 2064 001b 0E       		.uleb128 0xe
 2065 001c 00       		.byte	0
 2066 001d 00       		.byte	0
 2067 001e 03       		.uleb128 0x3
 2068 001f 24       		.uleb128 0x24
 2069 0020 00       		.byte	0
 2070 0021 0B       		.uleb128 0xb
 2071 0022 0B       		.uleb128 0xb
 2072 0023 3E       		.uleb128 0x3e
 2073 0024 0B       		.uleb128 0xb
 2074 0025 03       		.uleb128 0x3
 2075 0026 08       		.uleb128 0x8
 2076 0027 00       		.byte	0
 2077 0028 00       		.byte	0
 2078 0029 04       		.uleb128 0x4
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 53


 2079 002a 16       		.uleb128 0x16
 2080 002b 00       		.byte	0
 2081 002c 03       		.uleb128 0x3
 2082 002d 0E       		.uleb128 0xe
 2083 002e 3A       		.uleb128 0x3a
 2084 002f 0B       		.uleb128 0xb
 2085 0030 3B       		.uleb128 0x3b
 2086 0031 05       		.uleb128 0x5
 2087 0032 49       		.uleb128 0x49
 2088 0033 13       		.uleb128 0x13
 2089 0034 00       		.byte	0
 2090 0035 00       		.byte	0
 2091 0036 05       		.uleb128 0x5
 2092 0037 35       		.uleb128 0x35
 2093 0038 00       		.byte	0
 2094 0039 49       		.uleb128 0x49
 2095 003a 13       		.uleb128 0x13
 2096 003b 00       		.byte	0
 2097 003c 00       		.byte	0
 2098 003d 06       		.uleb128 0x6
 2099 003e 2E       		.uleb128 0x2e
 2100 003f 00       		.byte	0
 2101 0040 3F       		.uleb128 0x3f
 2102 0041 19       		.uleb128 0x19
 2103 0042 03       		.uleb128 0x3
 2104 0043 0E       		.uleb128 0xe
 2105 0044 3A       		.uleb128 0x3a
 2106 0045 0B       		.uleb128 0xb
 2107 0046 3B       		.uleb128 0x3b
 2108 0047 0B       		.uleb128 0xb
 2109 0048 27       		.uleb128 0x27
 2110 0049 19       		.uleb128 0x19
 2111 004a 11       		.uleb128 0x11
 2112 004b 01       		.uleb128 0x1
 2113 004c 12       		.uleb128 0x12
 2114 004d 06       		.uleb128 0x6
 2115 004e 40       		.uleb128 0x40
 2116 004f 18       		.uleb128 0x18
 2117 0050 9642     		.uleb128 0x2116
 2118 0052 19       		.uleb128 0x19
 2119 0053 00       		.byte	0
 2120 0054 00       		.byte	0
 2121 0055 07       		.uleb128 0x7
 2122 0056 2E       		.uleb128 0x2e
 2123 0057 01       		.byte	0x1
 2124 0058 3F       		.uleb128 0x3f
 2125 0059 19       		.uleb128 0x19
 2126 005a 03       		.uleb128 0x3
 2127 005b 0E       		.uleb128 0xe
 2128 005c 3A       		.uleb128 0x3a
 2129 005d 0B       		.uleb128 0xb
 2130 005e 3B       		.uleb128 0x3b
 2131 005f 0B       		.uleb128 0xb
 2132 0060 27       		.uleb128 0x27
 2133 0061 19       		.uleb128 0x19
 2134 0062 11       		.uleb128 0x11
 2135 0063 01       		.uleb128 0x1
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 54


 2136 0064 12       		.uleb128 0x12
 2137 0065 06       		.uleb128 0x6
 2138 0066 40       		.uleb128 0x40
 2139 0067 18       		.uleb128 0x18
 2140 0068 9642     		.uleb128 0x2116
 2141 006a 19       		.uleb128 0x19
 2142 006b 01       		.uleb128 0x1
 2143 006c 13       		.uleb128 0x13
 2144 006d 00       		.byte	0
 2145 006e 00       		.byte	0
 2146 006f 08       		.uleb128 0x8
 2147 0070 34       		.uleb128 0x34
 2148 0071 00       		.byte	0
 2149 0072 03       		.uleb128 0x3
 2150 0073 0E       		.uleb128 0xe
 2151 0074 3A       		.uleb128 0x3a
 2152 0075 0B       		.uleb128 0xb
 2153 0076 3B       		.uleb128 0x3b
 2154 0077 0B       		.uleb128 0xb
 2155 0078 49       		.uleb128 0x49
 2156 0079 13       		.uleb128 0x13
 2157 007a 02       		.uleb128 0x2
 2158 007b 18       		.uleb128 0x18
 2159 007c 00       		.byte	0
 2160 007d 00       		.byte	0
 2161 007e 09       		.uleb128 0x9
 2162 007f 01       		.uleb128 0x1
 2163 0080 01       		.byte	0x1
 2164 0081 49       		.uleb128 0x49
 2165 0082 13       		.uleb128 0x13
 2166 0083 01       		.uleb128 0x1
 2167 0084 13       		.uleb128 0x13
 2168 0085 00       		.byte	0
 2169 0086 00       		.byte	0
 2170 0087 0A       		.uleb128 0xa
 2171 0088 21       		.uleb128 0x21
 2172 0089 00       		.byte	0
 2173 008a 49       		.uleb128 0x49
 2174 008b 13       		.uleb128 0x13
 2175 008c 2F       		.uleb128 0x2f
 2176 008d 0B       		.uleb128 0xb
 2177 008e 00       		.byte	0
 2178 008f 00       		.byte	0
 2179 0090 0B       		.uleb128 0xb
 2180 0091 26       		.uleb128 0x26
 2181 0092 00       		.byte	0
 2182 0093 49       		.uleb128 0x49
 2183 0094 13       		.uleb128 0x13
 2184 0095 00       		.byte	0
 2185 0096 00       		.byte	0
 2186 0097 0C       		.uleb128 0xc
 2187 0098 2E       		.uleb128 0x2e
 2188 0099 00       		.byte	0
 2189 009a 3F       		.uleb128 0x3f
 2190 009b 19       		.uleb128 0x19
 2191 009c 03       		.uleb128 0x3
 2192 009d 0E       		.uleb128 0xe
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 55


 2193 009e 3A       		.uleb128 0x3a
 2194 009f 0B       		.uleb128 0xb
 2195 00a0 3B       		.uleb128 0x3b
 2196 00a1 05       		.uleb128 0x5
 2197 00a2 27       		.uleb128 0x27
 2198 00a3 19       		.uleb128 0x19
 2199 00a4 11       		.uleb128 0x11
 2200 00a5 01       		.uleb128 0x1
 2201 00a6 12       		.uleb128 0x12
 2202 00a7 06       		.uleb128 0x6
 2203 00a8 40       		.uleb128 0x40
 2204 00a9 18       		.uleb128 0x18
 2205 00aa 9642     		.uleb128 0x2116
 2206 00ac 19       		.uleb128 0x19
 2207 00ad 00       		.byte	0
 2208 00ae 00       		.byte	0
 2209 00af 0D       		.uleb128 0xd
 2210 00b0 2E       		.uleb128 0x2e
 2211 00b1 00       		.byte	0
 2212 00b2 3F       		.uleb128 0x3f
 2213 00b3 19       		.uleb128 0x19
 2214 00b4 03       		.uleb128 0x3
 2215 00b5 0E       		.uleb128 0xe
 2216 00b6 3A       		.uleb128 0x3a
 2217 00b7 0B       		.uleb128 0xb
 2218 00b8 3B       		.uleb128 0x3b
 2219 00b9 05       		.uleb128 0x5
 2220 00ba 27       		.uleb128 0x27
 2221 00bb 19       		.uleb128 0x19
 2222 00bc 11       		.uleb128 0x11
 2223 00bd 01       		.uleb128 0x1
 2224 00be 12       		.uleb128 0x12
 2225 00bf 06       		.uleb128 0x6
 2226 00c0 40       		.uleb128 0x40
 2227 00c1 18       		.uleb128 0x18
 2228 00c2 9742     		.uleb128 0x2117
 2229 00c4 19       		.uleb128 0x19
 2230 00c5 00       		.byte	0
 2231 00c6 00       		.byte	0
 2232 00c7 0E       		.uleb128 0xe
 2233 00c8 2E       		.uleb128 0x2e
 2234 00c9 01       		.byte	0x1
 2235 00ca 3F       		.uleb128 0x3f
 2236 00cb 19       		.uleb128 0x19
 2237 00cc 03       		.uleb128 0x3
 2238 00cd 0E       		.uleb128 0xe
 2239 00ce 3A       		.uleb128 0x3a
 2240 00cf 0B       		.uleb128 0xb
 2241 00d0 3B       		.uleb128 0x3b
 2242 00d1 05       		.uleb128 0x5
 2243 00d2 27       		.uleb128 0x27
 2244 00d3 19       		.uleb128 0x19
 2245 00d4 49       		.uleb128 0x49
 2246 00d5 13       		.uleb128 0x13
 2247 00d6 11       		.uleb128 0x11
 2248 00d7 01       		.uleb128 0x1
 2249 00d8 12       		.uleb128 0x12
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 56


 2250 00d9 06       		.uleb128 0x6
 2251 00da 40       		.uleb128 0x40
 2252 00db 18       		.uleb128 0x18
 2253 00dc 9742     		.uleb128 0x2117
 2254 00de 19       		.uleb128 0x19
 2255 00df 01       		.uleb128 0x1
 2256 00e0 13       		.uleb128 0x13
 2257 00e1 00       		.byte	0
 2258 00e2 00       		.byte	0
 2259 00e3 0F       		.uleb128 0xf
 2260 00e4 05       		.uleb128 0x5
 2261 00e5 00       		.byte	0
 2262 00e6 03       		.uleb128 0x3
 2263 00e7 0E       		.uleb128 0xe
 2264 00e8 3A       		.uleb128 0x3a
 2265 00e9 0B       		.uleb128 0xb
 2266 00ea 3B       		.uleb128 0x3b
 2267 00eb 05       		.uleb128 0x5
 2268 00ec 49       		.uleb128 0x49
 2269 00ed 13       		.uleb128 0x13
 2270 00ee 02       		.uleb128 0x2
 2271 00ef 18       		.uleb128 0x18
 2272 00f0 00       		.byte	0
 2273 00f1 00       		.byte	0
 2274 00f2 10       		.uleb128 0x10
 2275 00f3 34       		.uleb128 0x34
 2276 00f4 00       		.byte	0
 2277 00f5 03       		.uleb128 0x3
 2278 00f6 0E       		.uleb128 0xe
 2279 00f7 3A       		.uleb128 0x3a
 2280 00f8 0B       		.uleb128 0xb
 2281 00f9 3B       		.uleb128 0x3b
 2282 00fa 05       		.uleb128 0x5
 2283 00fb 49       		.uleb128 0x49
 2284 00fc 13       		.uleb128 0x13
 2285 00fd 02       		.uleb128 0x2
 2286 00fe 18       		.uleb128 0x18
 2287 00ff 00       		.byte	0
 2288 0100 00       		.byte	0
 2289 0101 11       		.uleb128 0x11
 2290 0102 2E       		.uleb128 0x2e
 2291 0103 01       		.byte	0x1
 2292 0104 3F       		.uleb128 0x3f
 2293 0105 19       		.uleb128 0x19
 2294 0106 03       		.uleb128 0x3
 2295 0107 0E       		.uleb128 0xe
 2296 0108 3A       		.uleb128 0x3a
 2297 0109 0B       		.uleb128 0xb
 2298 010a 3B       		.uleb128 0x3b
 2299 010b 05       		.uleb128 0x5
 2300 010c 27       		.uleb128 0x27
 2301 010d 19       		.uleb128 0x19
 2302 010e 49       		.uleb128 0x49
 2303 010f 13       		.uleb128 0x13
 2304 0110 11       		.uleb128 0x11
 2305 0111 01       		.uleb128 0x1
 2306 0112 12       		.uleb128 0x12
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 57


 2307 0113 06       		.uleb128 0x6
 2308 0114 40       		.uleb128 0x40
 2309 0115 18       		.uleb128 0x18
 2310 0116 9642     		.uleb128 0x2116
 2311 0118 19       		.uleb128 0x19
 2312 0119 01       		.uleb128 0x1
 2313 011a 13       		.uleb128 0x13
 2314 011b 00       		.byte	0
 2315 011c 00       		.byte	0
 2316 011d 12       		.uleb128 0x12
 2317 011e 2E       		.uleb128 0x2e
 2318 011f 01       		.byte	0x1
 2319 0120 3F       		.uleb128 0x3f
 2320 0121 19       		.uleb128 0x19
 2321 0122 03       		.uleb128 0x3
 2322 0123 0E       		.uleb128 0xe
 2323 0124 3A       		.uleb128 0x3a
 2324 0125 0B       		.uleb128 0xb
 2325 0126 3B       		.uleb128 0x3b
 2326 0127 05       		.uleb128 0x5
 2327 0128 27       		.uleb128 0x27
 2328 0129 19       		.uleb128 0x19
 2329 012a 11       		.uleb128 0x11
 2330 012b 01       		.uleb128 0x1
 2331 012c 12       		.uleb128 0x12
 2332 012d 06       		.uleb128 0x6
 2333 012e 40       		.uleb128 0x40
 2334 012f 18       		.uleb128 0x18
 2335 0130 9742     		.uleb128 0x2117
 2336 0132 19       		.uleb128 0x19
 2337 0133 01       		.uleb128 0x1
 2338 0134 13       		.uleb128 0x13
 2339 0135 00       		.byte	0
 2340 0136 00       		.byte	0
 2341 0137 13       		.uleb128 0x13
 2342 0138 2E       		.uleb128 0x2e
 2343 0139 01       		.byte	0x1
 2344 013a 3F       		.uleb128 0x3f
 2345 013b 19       		.uleb128 0x19
 2346 013c 03       		.uleb128 0x3
 2347 013d 0E       		.uleb128 0xe
 2348 013e 3A       		.uleb128 0x3a
 2349 013f 0B       		.uleb128 0xb
 2350 0140 3B       		.uleb128 0x3b
 2351 0141 05       		.uleb128 0x5
 2352 0142 27       		.uleb128 0x27
 2353 0143 19       		.uleb128 0x19
 2354 0144 11       		.uleb128 0x11
 2355 0145 01       		.uleb128 0x1
 2356 0146 12       		.uleb128 0x12
 2357 0147 06       		.uleb128 0x6
 2358 0148 40       		.uleb128 0x40
 2359 0149 18       		.uleb128 0x18
 2360 014a 9642     		.uleb128 0x2116
 2361 014c 19       		.uleb128 0x19
 2362 014d 01       		.uleb128 0x1
 2363 014e 13       		.uleb128 0x13
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 58


 2364 014f 00       		.byte	0
 2365 0150 00       		.byte	0
 2366 0151 14       		.uleb128 0x14
 2367 0152 34       		.uleb128 0x34
 2368 0153 00       		.byte	0
 2369 0154 03       		.uleb128 0x3
 2370 0155 0E       		.uleb128 0xe
 2371 0156 3A       		.uleb128 0x3a
 2372 0157 0B       		.uleb128 0xb
 2373 0158 3B       		.uleb128 0x3b
 2374 0159 0B       		.uleb128 0xb
 2375 015a 49       		.uleb128 0x49
 2376 015b 13       		.uleb128 0x13
 2377 015c 3F       		.uleb128 0x3f
 2378 015d 19       		.uleb128 0x19
 2379 015e 02       		.uleb128 0x2
 2380 015f 18       		.uleb128 0x18
 2381 0160 00       		.byte	0
 2382 0161 00       		.byte	0
 2383 0162 00       		.byte	0
 2384              		.section	.debug_aranges,"",%progbits
 2385 0000 AC000000 		.4byte	0xac
 2386 0004 0200     		.2byte	0x2
 2387 0006 00000000 		.4byte	.Ldebug_info0
 2388 000a 04       		.byte	0x4
 2389 000b 00       		.byte	0
 2390 000c 0000     		.2byte	0
 2391 000e 0000     		.2byte	0
 2392 0010 00000000 		.4byte	.LFB2
 2393 0014 24000000 		.4byte	.LFE2-.LFB2
 2394 0018 00000000 		.4byte	.LFB3
 2395 001c 6C020000 		.4byte	.LFE3-.LFB3
 2396 0020 00000000 		.4byte	.LFB4
 2397 0024 38000000 		.4byte	.LFE4-.LFB4
 2398 0028 00000000 		.4byte	.LFB5
 2399 002c 1C000000 		.4byte	.LFE5-.LFB5
 2400 0030 00000000 		.4byte	.LFB6
 2401 0034 14000000 		.4byte	.LFE6-.LFB6
 2402 0038 00000000 		.4byte	.LFB7
 2403 003c 0A000000 		.4byte	.LFE7-.LFB7
 2404 0040 00000000 		.4byte	.LFB8
 2405 0044 7C000000 		.4byte	.LFE8-.LFB8
 2406 0048 00000000 		.4byte	.LFB9
 2407 004c 4C000000 		.4byte	.LFE9-.LFB9
 2408 0050 00000000 		.4byte	.LFB10
 2409 0054 20000000 		.4byte	.LFE10-.LFB10
 2410 0058 00000000 		.4byte	.LFB11
 2411 005c 1C000000 		.4byte	.LFE11-.LFB11
 2412 0060 00000000 		.4byte	.LFB12
 2413 0064 30000000 		.4byte	.LFE12-.LFB12
 2414 0068 00000000 		.4byte	.LFB13
 2415 006c 30000000 		.4byte	.LFE13-.LFB13
 2416 0070 00000000 		.4byte	.LFB14
 2417 0074 20000000 		.4byte	.LFE14-.LFB14
 2418 0078 00000000 		.4byte	.LFB15
 2419 007c 20000000 		.4byte	.LFE15-.LFB15
 2420 0080 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 59


 2421 0084 34000000 		.4byte	.LFE16-.LFB16
 2422 0088 00000000 		.4byte	.LFB17
 2423 008c 2C000000 		.4byte	.LFE17-.LFB17
 2424 0090 00000000 		.4byte	.LFB18
 2425 0094 A0000000 		.4byte	.LFE18-.LFB18
 2426 0098 00000000 		.4byte	.LFB19
 2427 009c 90000000 		.4byte	.LFE19-.LFB19
 2428 00a0 00000000 		.4byte	.LFB20
 2429 00a4 80000000 		.4byte	.LFE20-.LFB20
 2430 00a8 00000000 		.4byte	0
 2431 00ac 00000000 		.4byte	0
 2432              		.section	.debug_ranges,"",%progbits
 2433              	.Ldebug_ranges0:
 2434 0000 00000000 		.4byte	.LFB2
 2435 0004 24000000 		.4byte	.LFE2
 2436 0008 00000000 		.4byte	.LFB3
 2437 000c 6C020000 		.4byte	.LFE3
 2438 0010 00000000 		.4byte	.LFB4
 2439 0014 38000000 		.4byte	.LFE4
 2440 0018 00000000 		.4byte	.LFB5
 2441 001c 1C000000 		.4byte	.LFE5
 2442 0020 00000000 		.4byte	.LFB6
 2443 0024 14000000 		.4byte	.LFE6
 2444 0028 00000000 		.4byte	.LFB7
 2445 002c 0A000000 		.4byte	.LFE7
 2446 0030 00000000 		.4byte	.LFB8
 2447 0034 7C000000 		.4byte	.LFE8
 2448 0038 00000000 		.4byte	.LFB9
 2449 003c 4C000000 		.4byte	.LFE9
 2450 0040 00000000 		.4byte	.LFB10
 2451 0044 20000000 		.4byte	.LFE10
 2452 0048 00000000 		.4byte	.LFB11
 2453 004c 1C000000 		.4byte	.LFE11
 2454 0050 00000000 		.4byte	.LFB12
 2455 0054 30000000 		.4byte	.LFE12
 2456 0058 00000000 		.4byte	.LFB13
 2457 005c 30000000 		.4byte	.LFE13
 2458 0060 00000000 		.4byte	.LFB14
 2459 0064 20000000 		.4byte	.LFE14
 2460 0068 00000000 		.4byte	.LFB15
 2461 006c 20000000 		.4byte	.LFE15
 2462 0070 00000000 		.4byte	.LFB16
 2463 0074 34000000 		.4byte	.LFE16
 2464 0078 00000000 		.4byte	.LFB17
 2465 007c 2C000000 		.4byte	.LFE17
 2466 0080 00000000 		.4byte	.LFB18
 2467 0084 A0000000 		.4byte	.LFE18
 2468 0088 00000000 		.4byte	.LFB19
 2469 008c 90000000 		.4byte	.LFE19
 2470 0090 00000000 		.4byte	.LFB20
 2471 0094 80000000 		.4byte	.LFE20
 2472 0098 00000000 		.4byte	0
 2473 009c 00000000 		.4byte	0
 2474              		.section	.debug_line,"",%progbits
 2475              	.Ldebug_line0:
 2476 0000 C1020000 		.section	.debug_str,"MS",%progbits,1
 2476      02004000 
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 60


 2476      00000201 
 2476      FB0E0D00 
 2476      01010101 
 2477              	.LASF10:
 2478 0000 75696E74 		.ascii	"uint16\000"
 2478      313600
 2479              	.LASF50:
 2480 0007 61646347 		.ascii	"adcGain\000"
 2480      61696E00 
 2481              	.LASF24:
 2482 000f 636F756E 		.ascii	"counts\000"
 2482      747300
 2483              	.LASF56:
 2484 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2484      436F756E 
 2484      7473546F 
 2484      5F566F6C 
 2484      747300
 2485              	.LASF37:
 2486 0029 4144435F 		.ascii	"ADC_Init\000"
 2486      496E6974 
 2486      00
 2487              	.LASF7:
 2488 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2488      206C6F6E 
 2488      6720756E 
 2488      7369676E 
 2488      65642069 
 2489              	.LASF25:
 2490 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2490      496E7075 
 2490      7473506C 
 2490      6163656D 
 2490      656E7400 
 2491              	.LASF29:
 2492 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2492      53746172 
 2492      74436F6E 
 2492      76657274 
 2492      00
 2493              	.LASF6:
 2494 006e 6C6F6E67 		.ascii	"long long int\000"
 2494      206C6F6E 
 2494      6720696E 
 2494      7400
 2495              	.LASF0:
 2496 007c 7369676E 		.ascii	"signed char\000"
 2496      65642063 
 2496      68617200 
 2497              	.LASF31:
 2498 0088 73746174 		.ascii	"status\000"
 2498      757300
 2499              	.LASF64:
 2500 008f 433A5C55 		.ascii	"C:\\Users\\Intern\\Documents\\GitHub\\UV-Sticker\\P"
 2500      73657273 
 2500      5C496E74 
 2500      65726E5C 
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 61


 2500      446F6375 
 2501 00bc 736F635C 		.ascii	"soc\\UV-Project\\BLE_Temp_Test.cydsn\000"
 2501      55562D50 
 2501      726F6A65 
 2501      63745C42 
 2501      4C455F54 
 2502              	.LASF13:
 2503 00df 696E7433 		.ascii	"int32\000"
 2503      3200
 2504              	.LASF26:
 2505 00e5 4144435F 		.ascii	"ADC_Start\000"
 2505      53746172 
 2505      7400
 2506              	.LASF4:
 2507 00ef 6C6F6E67 		.ascii	"long int\000"
 2507      20696E74 
 2507      00
 2508              	.LASF54:
 2509 00f8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2509      436F756E 
 2509      7473546F 
 2509      5F75566F 
 2509      6C747300 
 2510              	.LASF61:
 2511 010c 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2511      636F756E 
 2511      74735065 
 2511      72313056 
 2511      6F6C7400 
 2512              	.LASF9:
 2513 0120 75696E74 		.ascii	"uint8\000"
 2513      3800
 2514              	.LASF16:
 2515 0126 646F7562 		.ascii	"double\000"
 2515      6C6500
 2516              	.LASF11:
 2517 012d 75696E74 		.ascii	"uint32\000"
 2517      333200
 2518              	.LASF39:
 2519 0134 6D61736B 		.ascii	"mask\000"
 2519      00
 2520              	.LASF59:
 2521 0139 4144435F 		.ascii	"ADC_initVar\000"
 2521      696E6974 
 2521      56617200 
 2522              	.LASF34:
 2523 0145 7265744D 		.ascii	"retMode\000"
 2523      6F646500 
 2524              	.LASF45:
 2525 014d 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2525      5365744C 
 2525      696D6974 
 2525      4D61736B 
 2525      00
 2526              	.LASF8:
 2527 015e 756E7369 		.ascii	"unsigned int\000"
 2527      676E6564 
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 62


 2527      20696E74 
 2527      00
 2528              	.LASF55:
 2529 016b 75566F6C 		.ascii	"uVolts\000"
 2529      747300
 2530              	.LASF5:
 2531 0172 6C6F6E67 		.ascii	"long unsigned int\000"
 2531      20756E73 
 2531      69676E65 
 2531      6420696E 
 2531      7400
 2532              	.LASF46:
 2533 0184 4144435F 		.ascii	"ADC_SetSatMask\000"
 2533      53657453 
 2533      61744D61 
 2533      736B00
 2534              	.LASF57:
 2535 0193 766F6C74 		.ascii	"volts\000"
 2535      7300
 2536              	.LASF23:
 2537 0199 746D7052 		.ascii	"tmpRegVal\000"
 2537      65675661 
 2537      6C00
 2538              	.LASF3:
 2539 01a3 73686F72 		.ascii	"short unsigned int\000"
 2539      7420756E 
 2539      7369676E 
 2539      65642069 
 2539      6E7400
 2540              	.LASF30:
 2541 01b6 4144435F 		.ascii	"ADC_StopConvert\000"
 2541      53746F70 
 2541      436F6E76 
 2541      65727400 
 2542              	.LASF62:
 2543 01c6 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2543      43313120 
 2543      352E342E 
 2543      31203230 
 2543      31363036 
 2544 01f9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2544      20726576 
 2544      6973696F 
 2544      6E203233 
 2544      37373135 
 2545 022c 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2545      66756E63 
 2545      74696F6E 
 2545      2D736563 
 2545      74696F6E 
 2546              	.LASF53:
 2547 0254 6D566F6C 		.ascii	"mVolts\000"
 2547      747300
 2548              	.LASF19:
 2549 025b 72656733 		.ascii	"reg32\000"
 2549      3200
 2550              	.LASF14:
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 63


 2551 0261 666C6F61 		.ascii	"float32\000"
 2551      74333200 
 2552              	.LASF21:
 2553 0269 73697A65 		.ascii	"sizetype\000"
 2553      74797065 
 2553      00
 2554              	.LASF42:
 2555 0272 6C6F774C 		.ascii	"lowLimit\000"
 2555      696D6974 
 2555      00
 2556              	.LASF20:
 2557 027b 6C6F6E67 		.ascii	"long double\000"
 2557      20646F75 
 2557      626C6500 
 2558              	.LASF43:
 2559 0287 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2559      53657448 
 2559      6967684C 
 2559      696D6974 
 2559      00
 2560              	.LASF40:
 2561 0298 4144435F 		.ascii	"ADC_EnableInjection\000"
 2561      456E6162 
 2561      6C65496E 
 2561      6A656374 
 2561      696F6E00 
 2562              	.LASF32:
 2563 02ac 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2563      4973456E 
 2563      64436F6E 
 2563      76657273 
 2563      696F6E00 
 2564              	.LASF17:
 2565 02c0 696E7436 		.ascii	"int64\000"
 2565      3400
 2566              	.LASF38:
 2567 02c6 4144435F 		.ascii	"ADC_SetChanMask\000"
 2567      53657443 
 2567      68616E4D 
 2567      61736B00 
 2568              	.LASF63:
 2569 02d6 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2569      72617465 
 2569      645F536F 
 2569      75726365 
 2569      5C50536F 
 2570              	.LASF49:
 2571 02f3 4144435F 		.ascii	"ADC_SetGain\000"
 2571      53657447 
 2571      61696E00 
 2572              	.LASF15:
 2573 02ff 666C6F61 		.ascii	"float\000"
 2573      7400
 2574              	.LASF44:
 2575 0305 68696768 		.ascii	"highLimit\000"
 2575      4C696D69 
 2575      7400
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 64


 2576              	.LASF51:
 2577 030f 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2577      436F756E 
 2577      7473546F 
 2577      5F6D566F 
 2577      6C747300 
 2578              	.LASF41:
 2579 0323 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2579      5365744C 
 2579      6F774C69 
 2579      6D697400 
 2580              	.LASF1:
 2581 0333 756E7369 		.ascii	"unsigned char\000"
 2581      676E6564 
 2581      20636861 
 2581      7200
 2582              	.LASF60:
 2583 0341 4144435F 		.ascii	"ADC_offset\000"
 2583      6F666673 
 2583      657400
 2584              	.LASF2:
 2585 034c 73686F72 		.ascii	"short int\000"
 2585      7420696E 
 2585      7400
 2586              	.LASF28:
 2587 0356 4144435F 		.ascii	"ADC_Stop\000"
 2587      53746F70 
 2587      00
 2588              	.LASF22:
 2589 035f 63684E75 		.ascii	"chNum\000"
 2589      6D00
 2590              	.LASF35:
 2591 0365 6368616E 		.ascii	"chan\000"
 2591      00
 2592              	.LASF18:
 2593 036a 63686172 		.ascii	"char\000"
 2593      00
 2594              	.LASF58:
 2595 036f 4144435F 		.ascii	"ADC_channelsConfig\000"
 2595      6368616E 
 2595      6E656C73 
 2595      436F6E66 
 2595      696700
 2596              	.LASF48:
 2597 0382 6F666673 		.ascii	"offset\000"
 2597      657400
 2598              	.LASF52:
 2599 0389 61646343 		.ascii	"adcCounts\000"
 2599      6F756E74 
 2599      7300
 2600              	.LASF27:
 2601 0393 4144435F 		.ascii	"ADC_Enable\000"
 2601      456E6162 
 2601      6C6500
 2602              	.LASF12:
 2603 039e 696E7431 		.ascii	"int16\000"
 2603      3600
ARM GAS  C:\Users\Intern\AppData\Local\Temp\ccF0C08n.s 			page 65


 2604              	.LASF47:
 2605 03a4 4144435F 		.ascii	"ADC_SetOffset\000"
 2605      5365744F 
 2605      66667365 
 2605      7400
 2606              	.LASF36:
 2607 03b2 72657375 		.ascii	"result\000"
 2607      6C7400
 2608              	.LASF33:
 2609 03b9 4144435F 		.ascii	"ADC_GetResult16\000"
 2609      47657452 
 2609      6573756C 
 2609      74313600 
 2610              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
